// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ns.proto

package ns

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RXWindow int32

const (
	// Receive window 1
	RXWindow_RX1 RXWindow = 0
	// Receive window 2
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Modulation int32

const (
	// LoRa
	Modulation_LORA Modulation = 0
	// FSK
	Modulation_FSK Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type AggregationInterval int32

const (
	AggregationInterval_SECOND  AggregationInterval = 0
	AggregationInterval_MINUTE  AggregationInterval = 1
	AggregationInterval_HOUR    AggregationInterval = 2
	AggregationInterval_DAY     AggregationInterval = 3
	AggregationInterval_WEEK    AggregationInterval = 4
	AggregationInterval_MONTH   AggregationInterval = 5
	AggregationInterval_QUARTER AggregationInterval = 6
	AggregationInterval_YEAR    AggregationInterval = 7
)

var AggregationInterval_name = map[int32]string{
	0: "SECOND",
	1: "MINUTE",
	2: "HOUR",
	3: "DAY",
	4: "WEEK",
	5: "MONTH",
	6: "QUARTER",
	7: "YEAR",
}
var AggregationInterval_value = map[string]int32{
	"SECOND":  0,
	"MINUTE":  1,
	"HOUR":    2,
	"DAY":     3,
	"WEEK":    4,
	"MONTH":   5,
	"QUARTER": 6,
	"YEAR":    7,
}

func (x AggregationInterval) String() string {
	return proto.EnumName(AggregationInterval_name, int32(x))
}
func (AggregationInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type CreateServiceProfileRequest struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
}

func (m *CreateServiceProfileRequest) Reset()                    { *m = CreateServiceProfileRequest{} }
func (m *CreateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileRequest) ProtoMessage()               {}
func (*CreateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

type CreateServiceProfileResponse struct {
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *CreateServiceProfileResponse) Reset()                    { *m = CreateServiceProfileResponse{} }
func (m *CreateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileResponse) ProtoMessage()               {}
func (*CreateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateServiceProfileResponse) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type GetServiceProfileRequest struct {
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *GetServiceProfileRequest) Reset()                    { *m = GetServiceProfileRequest{} }
func (m *GetServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileRequest) ProtoMessage()               {}
func (*GetServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetServiceProfileRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type GetServiceProfileResponse struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
	CreatedAt      string          `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt      string          `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetServiceProfileResponse) Reset()                    { *m = GetServiceProfileResponse{} }
func (m *GetServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileResponse) ProtoMessage()               {}
func (*GetServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetServiceProfileResponse) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

func (m *GetServiceProfileResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetServiceProfileResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateServiceProfileRequest struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
}

func (m *UpdateServiceProfileRequest) Reset()                    { *m = UpdateServiceProfileRequest{} }
func (m *UpdateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileRequest) ProtoMessage()               {}
func (*UpdateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *UpdateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

type UpdateServiceProfileResponse struct {
}

func (m *UpdateServiceProfileResponse) Reset()                    { *m = UpdateServiceProfileResponse{} }
func (m *UpdateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileResponse) ProtoMessage()               {}
func (*UpdateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type DeleteServiceProfileRequest struct {
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *DeleteServiceProfileRequest) Reset()                    { *m = DeleteServiceProfileRequest{} }
func (m *DeleteServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileRequest) ProtoMessage()               {}
func (*DeleteServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *DeleteServiceProfileRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type DeleteServiceProfileResponse struct {
}

func (m *DeleteServiceProfileResponse) Reset()                    { *m = DeleteServiceProfileResponse{} }
func (m *DeleteServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileResponse) ProtoMessage()               {}
func (*DeleteServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type RoutingProfile struct {
	RoutingProfileID string `protobuf:"bytes,1,opt,name=routingProfileID" json:"routingProfileID,omitempty"`
	AsID             string `protobuf:"bytes,2,opt,name=asID" json:"asID,omitempty"`
}

func (m *RoutingProfile) Reset()                    { *m = RoutingProfile{} }
func (m *RoutingProfile) String() string            { return proto.CompactTextString(m) }
func (*RoutingProfile) ProtoMessage()               {}
func (*RoutingProfile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *RoutingProfile) GetRoutingProfileID() string {
	if m != nil {
		return m.RoutingProfileID
	}
	return ""
}

func (m *RoutingProfile) GetAsID() string {
	if m != nil {
		return m.AsID
	}
	return ""
}

type CreateRoutingProfileRequest struct {
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routingProfile" json:"routingProfile,omitempty"`
	// ca certificate for connecting to lora-app-server
	CaCert string `protobuf:"bytes,2,opt,name=caCert" json:"caCert,omitempty"`
	// tls certificate for connecting to lora-app-server
	TlsCert string `protobuf:"bytes,3,opt,name=tlsCert" json:"tlsCert,omitempty"`
	// tls key for connecting to lora-app-server
	TlsKey string `protobuf:"bytes,4,opt,name=tlsKey" json:"tlsKey,omitempty"`
}

func (m *CreateRoutingProfileRequest) Reset()                    { *m = CreateRoutingProfileRequest{} }
func (m *CreateRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoutingProfileRequest) ProtoMessage()               {}
func (*CreateRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CreateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

func (m *CreateRoutingProfileRequest) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *CreateRoutingProfileRequest) GetTlsCert() string {
	if m != nil {
		return m.TlsCert
	}
	return ""
}

func (m *CreateRoutingProfileRequest) GetTlsKey() string {
	if m != nil {
		return m.TlsKey
	}
	return ""
}

type CreateRoutingProfileResponse struct {
	RoutingProfileID string `protobuf:"bytes,1,opt,name=routingProfileID" json:"routingProfileID,omitempty"`
}

func (m *CreateRoutingProfileResponse) Reset()                    { *m = CreateRoutingProfileResponse{} }
func (m *CreateRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRoutingProfileResponse) ProtoMessage()               {}
func (*CreateRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *CreateRoutingProfileResponse) GetRoutingProfileID() string {
	if m != nil {
		return m.RoutingProfileID
	}
	return ""
}

type GetRoutingProfileRequest struct {
	RoutingProfileID string `protobuf:"bytes,1,opt,name=routingProfileID" json:"routingProfileID,omitempty"`
}

func (m *GetRoutingProfileRequest) Reset()                    { *m = GetRoutingProfileRequest{} }
func (m *GetRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoutingProfileRequest) ProtoMessage()               {}
func (*GetRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetRoutingProfileRequest) GetRoutingProfileID() string {
	if m != nil {
		return m.RoutingProfileID
	}
	return ""
}

type GetRoutingProfileResponse struct {
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routingProfile" json:"routingProfile,omitempty"`
	CreatedAt      string          `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt      string          `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// ca certificate for connecting to lora-app-server
	CaCert string `protobuf:"bytes,4,opt,name=caCert" json:"caCert,omitempty"`
	// tls certificate for connecting to lora-app-server
	TlsCert string `protobuf:"bytes,5,opt,name=tlsCert" json:"tlsCert,omitempty"`
}

func (m *GetRoutingProfileResponse) Reset()                    { *m = GetRoutingProfileResponse{} }
func (m *GetRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRoutingProfileResponse) ProtoMessage()               {}
func (*GetRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GetRoutingProfileResponse) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

func (m *GetRoutingProfileResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetRoutingProfileResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetRoutingProfileResponse) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *GetRoutingProfileResponse) GetTlsCert() string {
	if m != nil {
		return m.TlsCert
	}
	return ""
}

type UpdateRoutingProfileRequest struct {
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routingProfile" json:"routingProfile,omitempty"`
	// ca certificate for connecting to lora-app-server
	CaCert string `protobuf:"bytes,2,opt,name=caCert" json:"caCert,omitempty"`
	// tls certificate for connecting to lora-app-server
	TlsCert string `protobuf:"bytes,3,opt,name=tlsCert" json:"tlsCert,omitempty"`
	// tls key for connecting to lora-app-server
	TlsKey string `protobuf:"bytes,4,opt,name=tlsKey" json:"tlsKey,omitempty"`
}

func (m *UpdateRoutingProfileRequest) Reset()                    { *m = UpdateRoutingProfileRequest{} }
func (m *UpdateRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoutingProfileRequest) ProtoMessage()               {}
func (*UpdateRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *UpdateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if m != nil {
		return m.RoutingProfile
	}
	return nil
}

func (m *UpdateRoutingProfileRequest) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *UpdateRoutingProfileRequest) GetTlsCert() string {
	if m != nil {
		return m.TlsCert
	}
	return ""
}

func (m *UpdateRoutingProfileRequest) GetTlsKey() string {
	if m != nil {
		return m.TlsKey
	}
	return ""
}

type UpdateRoutingProfileResponse struct {
}

func (m *UpdateRoutingProfileResponse) Reset()                    { *m = UpdateRoutingProfileResponse{} }
func (m *UpdateRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoutingProfileResponse) ProtoMessage()               {}
func (*UpdateRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type DeleteRoutingProfileRequest struct {
	RoutingProfileID string `protobuf:"bytes,1,opt,name=routingProfileID" json:"routingProfileID,omitempty"`
}

func (m *DeleteRoutingProfileRequest) Reset()                    { *m = DeleteRoutingProfileRequest{} }
func (m *DeleteRoutingProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoutingProfileRequest) ProtoMessage()               {}
func (*DeleteRoutingProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *DeleteRoutingProfileRequest) GetRoutingProfileID() string {
	if m != nil {
		return m.RoutingProfileID
	}
	return ""
}

type DeleteRoutingProfileResponse struct {
}

func (m *DeleteRoutingProfileResponse) Reset()                    { *m = DeleteRoutingProfileResponse{} }
func (m *DeleteRoutingProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoutingProfileResponse) ProtoMessage()               {}
func (*DeleteRoutingProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type CreateDeviceProfileRequest struct {
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=deviceProfile" json:"deviceProfile,omitempty"`
}

func (m *CreateDeviceProfileRequest) Reset()                    { *m = CreateDeviceProfileRequest{} }
func (m *CreateDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceProfileRequest) ProtoMessage()               {}
func (*CreateDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *CreateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

type CreateDeviceProfileResponse struct {
	DeviceProfileID string `protobuf:"bytes,1,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
}

func (m *CreateDeviceProfileResponse) Reset()                    { *m = CreateDeviceProfileResponse{} }
func (m *CreateDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceProfileResponse) ProtoMessage()               {}
func (*CreateDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *CreateDeviceProfileResponse) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

type GetDeviceProfileRequest struct {
	DeviceProfileID string `protobuf:"bytes,1,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
}

func (m *GetDeviceProfileRequest) Reset()                    { *m = GetDeviceProfileRequest{} }
func (m *GetDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceProfileRequest) ProtoMessage()               {}
func (*GetDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GetDeviceProfileRequest) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

type GetDeviceProfileResponse struct {
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=deviceProfile" json:"deviceProfile,omitempty"`
	CreatedAt     string         `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt     string         `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetDeviceProfileResponse) Reset()                    { *m = GetDeviceProfileResponse{} }
func (m *GetDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceProfileResponse) ProtoMessage()               {}
func (*GetDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *GetDeviceProfileResponse) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

func (m *GetDeviceProfileResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetDeviceProfileResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateDeviceProfileRequest struct {
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=deviceProfile" json:"deviceProfile,omitempty"`
}

func (m *UpdateDeviceProfileRequest) Reset()                    { *m = UpdateDeviceProfileRequest{} }
func (m *UpdateDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceProfileRequest) ProtoMessage()               {}
func (*UpdateDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *UpdateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if m != nil {
		return m.DeviceProfile
	}
	return nil
}

type UpdateDeviceProfileResponse struct {
}

func (m *UpdateDeviceProfileResponse) Reset()                    { *m = UpdateDeviceProfileResponse{} }
func (m *UpdateDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceProfileResponse) ProtoMessage()               {}
func (*UpdateDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type DeleteDeviceProfileRequest struct {
	DeviceProfileID string `protobuf:"bytes,1,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
}

func (m *DeleteDeviceProfileRequest) Reset()                    { *m = DeleteDeviceProfileRequest{} }
func (m *DeleteDeviceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceProfileRequest) ProtoMessage()               {}
func (*DeleteDeviceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *DeleteDeviceProfileRequest) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

type DeleteDeviceProfileResponse struct {
}

func (m *DeleteDeviceProfileResponse) Reset()                    { *m = DeleteDeviceProfileResponse{} }
func (m *DeleteDeviceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceProfileResponse) ProtoMessage()               {}
func (*DeleteDeviceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type Device struct {
	DevEUI           []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	DeviceProfileID  string `protobuf:"bytes,2,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
	ServiceProfileID string `protobuf:"bytes,3,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	RoutingProfileID string `protobuf:"bytes,4,opt,name=routingProfileID" json:"routingProfileID,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *Device) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *Device) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

func (m *Device) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *Device) GetRoutingProfileID() string {
	if m != nil {
		return m.RoutingProfileID
	}
	return ""
}

type CreateDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *CreateDeviceRequest) Reset()                    { *m = CreateDeviceRequest{} }
func (m *CreateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceRequest) ProtoMessage()               {}
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *CreateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type CreateDeviceResponse struct {
}

func (m *CreateDeviceResponse) Reset()                    { *m = CreateDeviceResponse{} }
func (m *CreateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceResponse) ProtoMessage()               {}
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

type GetDeviceRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetDeviceRequest) Reset()                    { *m = GetDeviceRequest{} }
func (m *GetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceRequest) ProtoMessage()               {}
func (*GetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *GetDeviceRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type GetDeviceResponse struct {
	Device    *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	CreatedAt string  `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string  `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetDeviceResponse) Reset()                    { *m = GetDeviceResponse{} }
func (m *GetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceResponse) ProtoMessage()               {}
func (*GetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *GetDeviceResponse) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *GetDeviceResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetDeviceResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateDeviceRequest struct {
	Device *Device `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *UpdateDeviceRequest) Reset()                    { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()               {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *UpdateDeviceRequest) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type UpdateDeviceResponse struct {
}

func (m *UpdateDeviceResponse) Reset()                    { *m = UpdateDeviceResponse{} }
func (m *UpdateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeviceResponse) ProtoMessage()               {}
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

type DeleteDeviceRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *DeleteDeviceRequest) Reset()                    { *m = DeleteDeviceRequest{} }
func (m *DeleteDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceRequest) ProtoMessage()               {}
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *DeleteDeviceRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type DeleteDeviceResponse struct {
}

func (m *DeleteDeviceResponse) Reset()                    { *m = DeleteDeviceResponse{} }
func (m *DeleteDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceResponse) ProtoMessage()               {}
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

type ActivateDeviceRequest struct {
	// Device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// The address of the device (4 bytes).
	DevAddr []byte `protobuf:"bytes,2,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	// The network-session key (16 bytes).
	NwkSKey []byte `protobuf:"bytes,3,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,4,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// The frame-counter used for the next downlink frame.
	FCntDown uint32 `protobuf:"varint,5,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,6,opt,name=skipFCntCheck" json:"skipFCntCheck,omitempty"`
}

func (m *ActivateDeviceRequest) Reset()                    { *m = ActivateDeviceRequest{} }
func (m *ActivateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceRequest) ProtoMessage()               {}
func (*ActivateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *ActivateDeviceRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *ActivateDeviceRequest) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *ActivateDeviceRequest) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *ActivateDeviceRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *ActivateDeviceRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *ActivateDeviceRequest) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type ActivateDeviceResponse struct {
}

func (m *ActivateDeviceResponse) Reset()                    { *m = ActivateDeviceResponse{} }
func (m *ActivateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateDeviceResponse) ProtoMessage()               {}
func (*ActivateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

type DeactivateDeviceRequest struct {
	// Device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *DeactivateDeviceRequest) Reset()                    { *m = DeactivateDeviceRequest{} }
func (m *DeactivateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeactivateDeviceRequest) ProtoMessage()               {}
func (*DeactivateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *DeactivateDeviceRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type DeactivateDeviceResponse struct {
}

func (m *DeactivateDeviceResponse) Reset()                    { *m = DeactivateDeviceResponse{} }
func (m *DeactivateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeactivateDeviceResponse) ProtoMessage()               {}
func (*DeactivateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

type GetDeviceActivationRequest struct {
	// Device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetDeviceActivationRequest) Reset()                    { *m = GetDeviceActivationRequest{} }
func (m *GetDeviceActivationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationRequest) ProtoMessage()               {}
func (*GetDeviceActivationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *GetDeviceActivationRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type GetDeviceActivationResponse struct {
	// The address of the device (4 bytes).
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	// The network-session key (16 bytes).
	NwkSKey []byte `protobuf:"bytes,2,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,3,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// The frame-counter used for the next downlink frame.
	FCntDown uint32 `protobuf:"varint,4,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,5,opt,name=skipFCntCheck" json:"skipFCntCheck,omitempty"`
}

func (m *GetDeviceActivationResponse) Reset()                    { *m = GetDeviceActivationResponse{} }
func (m *GetDeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceActivationResponse) ProtoMessage()               {}
func (*GetDeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *GetDeviceActivationResponse) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *GetDeviceActivationResponse) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *GetDeviceActivationResponse) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *GetDeviceActivationResponse) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *GetDeviceActivationResponse) GetSkipFCntCheck() bool {
	if m != nil {
		return m.SkipFCntCheck
	}
	return false
}

type GetRandomDevAddrRequest struct {
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

type GetRandomDevAddrResponse struct {
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *GetRandomDevAddrResponse) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

type CreateMACCommandQueueItemRequest struct {
	// DevEUI of the node.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Command identifier (specified by the LoRaWAN specs).
	Cid uint32 `protobuf:"varint,4,opt,name=cid" json:"cid,omitempty"`
	// MAC-command(s). In case multiple payloads are defined, then they
	// are always sent within a single frame.
	Commands [][]byte `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (m *CreateMACCommandQueueItemRequest) Reset()         { *m = CreateMACCommandQueueItemRequest{} }
func (m *CreateMACCommandQueueItemRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMACCommandQueueItemRequest) ProtoMessage()    {}
func (*CreateMACCommandQueueItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{42}
}

func (m *CreateMACCommandQueueItemRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *CreateMACCommandQueueItemRequest) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CreateMACCommandQueueItemRequest) GetCommands() [][]byte {
	if m != nil {
		return m.Commands
	}
	return nil
}

type CreateMACCommandQueueItemResponse struct {
}

func (m *CreateMACCommandQueueItemResponse) Reset()         { *m = CreateMACCommandQueueItemResponse{} }
func (m *CreateMACCommandQueueItemResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMACCommandQueueItemResponse) ProtoMessage()    {}
func (*CreateMACCommandQueueItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{43}
}

type SendProprietaryPayloadRequest struct {
	// MACPayload of the proprietary LoRaWAN frame.
	MacPayload []byte `protobuf:"bytes,1,opt,name=macPayload,proto3" json:"macPayload,omitempty"`
	// MIC of the proprietary LoRaWAN frame (must be 4 bytes).
	Mic []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Gateway MAC address(es) to use for transmitting the LoRaWAN frame.
	GatewayMACs [][]byte `protobuf:"bytes,3,rep,name=gatewayMACs,proto3" json:"gatewayMACs,omitempty"`
	// Set to true for sending as a gateway, or false for sending as a node.
	// In the latter case the frame will be received by other gateways.
	IPol bool `protobuf:"varint,4,opt,name=iPol" json:"iPol,omitempty"`
	// Frequency (Hz) to use for the transmission.
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency" json:"frequency,omitempty"`
	// Data-rate to use for the transmission.
	Dr uint32 `protobuf:"varint,6,opt,name=dr" json:"dr,omitempty"`
}

func (m *SendProprietaryPayloadRequest) Reset()                    { *m = SendProprietaryPayloadRequest{} }
func (m *SendProprietaryPayloadRequest) String() string            { return proto.CompactTextString(m) }
func (*SendProprietaryPayloadRequest) ProtoMessage()               {}
func (*SendProprietaryPayloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *SendProprietaryPayloadRequest) GetMacPayload() []byte {
	if m != nil {
		return m.MacPayload
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetMic() []byte {
	if m != nil {
		return m.Mic
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetGatewayMACs() [][]byte {
	if m != nil {
		return m.GatewayMACs
	}
	return nil
}

func (m *SendProprietaryPayloadRequest) GetIPol() bool {
	if m != nil {
		return m.IPol
	}
	return false
}

func (m *SendProprietaryPayloadRequest) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *SendProprietaryPayloadRequest) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

type SendProprietaryPayloadResponse struct {
}

func (m *SendProprietaryPayloadResponse) Reset()                    { *m = SendProprietaryPayloadResponse{} }
func (m *SendProprietaryPayloadResponse) String() string            { return proto.CompactTextString(m) }
func (*SendProprietaryPayloadResponse) ProtoMessage()               {}
func (*SendProprietaryPayloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

type CreateGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,7,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *CreateGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *CreateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type CreateGatewayResponse struct {
}

func (m *CreateGatewayResponse) Reset()                    { *m = CreateGatewayResponse{} }
func (m *CreateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayResponse) ProtoMessage()               {}
func (*CreateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

type GetGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *GetGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type GetGatewayResponse struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// The timestamp when the gateway was created.
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt" json:"createdAt,omitempty"`
	// The timestamp when the gateway was last updated.
	UpdatedAt string `protobuf:"bytes,8,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// The timestamp when the gateway was first seen.
	FirstSeenAt string `protobuf:"bytes,9,opt,name=firstSeenAt" json:"firstSeenAt,omitempty"`
	// The timestamp when the gateway was last seen.
	LastSeenAt string `protobuf:"bytes,10,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,11,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *GetGatewayResponse) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *GetGatewayResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGatewayResponse) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetGatewayResponse) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetGatewayResponse) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *GetGatewayResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetFirstSeenAt() string {
	if m != nil {
		return m.FirstSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type UpdateGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,7,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *UpdateGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *UpdateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type UpdateGatewayResponse struct {
}

func (m *UpdateGatewayResponse) Reset()                    { *m = UpdateGatewayResponse{} }
func (m *UpdateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayResponse) ProtoMessage()               {}
func (*UpdateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

type ListGatewayRequest struct {
	// Max number of gateways to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayRequest) Reset()                    { *m = ListGatewayRequest{} }
func (m *ListGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayRequest) ProtoMessage()               {}
func (*ListGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *ListGatewayRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListGatewayResponse struct {
	// Total number of gateways.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Result-set.
	Result []*GetGatewayResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayResponse) Reset()                    { *m = ListGatewayResponse{} }
func (m *ListGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayResponse) ProtoMessage()               {}
func (*ListGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *ListGatewayResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayResponse) GetResult() []*GetGatewayResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *DeleteGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type DeleteGatewayResponse struct {
}

func (m *DeleteGatewayResponse) Reset()                    { *m = DeleteGatewayResponse{} }
func (m *DeleteGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayResponse) ProtoMessage()               {}
func (*DeleteGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rxPacketsReceived" json:"rxPacketsReceived,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOK int32 `protobuf:"varint,3,opt,name=rxPacketsReceivedOK" json:"rxPacketsReceivedOK,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=txPacketsReceived" json:"txPacketsReceived,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=txPacketsEmitted" json:"txPacketsEmitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

func (m *GatewayStats) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *GatewayStats) GetRxPacketsReceived() int32 {
	if m != nil {
		return m.RxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRxPacketsReceivedOK() int32 {
	if m != nil {
		return m.RxPacketsReceivedOK
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsReceived() int32 {
	if m != nil {
		return m.TxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsEmitted() int32 {
	if m != nil {
		return m.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Aggregation interval.
	Interval AggregationInterval `protobuf:"varint,2,opt,name=interval,enum=ns.AggregationInterval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp string `protobuf:"bytes,3,opt,name=startTimestamp" json:"startTimestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp string `protobuf:"bytes,4,opt,name=endTimestamp" json:"endTimestamp,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *GetGatewayStatsRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *GetGatewayStatsRequest) GetInterval() AggregationInterval {
	if m != nil {
		return m.Interval
	}
	return AggregationInterval_SECOND
}

func (m *GetGatewayStatsRequest) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{58} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

type MigrateNodeToDeviceSessionRequest struct {
	DevEUI    []byte   `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	JoinEUI   []byte   `protobuf:"bytes,2,opt,name=joinEUI,proto3" json:"joinEUI,omitempty"`
	DevNonces [][]byte `protobuf:"bytes,3,rep,name=devNonces,proto3" json:"devNonces,omitempty"`
}

func (m *MigrateNodeToDeviceSessionRequest) Reset()         { *m = MigrateNodeToDeviceSessionRequest{} }
func (m *MigrateNodeToDeviceSessionRequest) String() string { return proto.CompactTextString(m) }
func (*MigrateNodeToDeviceSessionRequest) ProtoMessage()    {}
func (*MigrateNodeToDeviceSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{59}
}

func (m *MigrateNodeToDeviceSessionRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *MigrateNodeToDeviceSessionRequest) GetJoinEUI() []byte {
	if m != nil {
		return m.JoinEUI
	}
	return nil
}

func (m *MigrateNodeToDeviceSessionRequest) GetDevNonces() [][]byte {
	if m != nil {
		return m.DevNonces
	}
	return nil
}

type MigrateNodeToDeviceSessionResponse struct {
}

func (m *MigrateNodeToDeviceSessionResponse) Reset()         { *m = MigrateNodeToDeviceSessionResponse{} }
func (m *MigrateNodeToDeviceSessionResponse) String() string { return proto.CompactTextString(m) }
func (*MigrateNodeToDeviceSessionResponse) ProtoMessage()    {}
func (*MigrateNodeToDeviceSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{60}
}

type DeviceQueueItem struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// The encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,2,opt,name=frmPayload,proto3" json:"frmPayload,omitempty"`
	// The FCnt of the payload.
	FCnt uint32 `protobuf:"varint,3,opt,name=fCnt" json:"fCnt,omitempty"`
	// The FPort of the payload.
	FPort uint32 `protobuf:"varint,4,opt,name=fPort" json:"fPort,omitempty"`
	// When set to true, LoRa Server will wait for the device to ack the
	// received frame.
	Confirmed bool `protobuf:"varint,5,opt,name=confirmed" json:"confirmed,omitempty"`
}

func (m *DeviceQueueItem) Reset()                    { *m = DeviceQueueItem{} }
func (m *DeviceQueueItem) String() string            { return proto.CompactTextString(m) }
func (*DeviceQueueItem) ProtoMessage()               {}
func (*DeviceQueueItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{61} }

func (m *DeviceQueueItem) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *DeviceQueueItem) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *DeviceQueueItem) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *DeviceQueueItem) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *DeviceQueueItem) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type CreateDeviceQueueItemRequest struct {
	Item *DeviceQueueItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *CreateDeviceQueueItemRequest) Reset()                    { *m = CreateDeviceQueueItemRequest{} }
func (m *CreateDeviceQueueItemRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceQueueItemRequest) ProtoMessage()               {}
func (*CreateDeviceQueueItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *CreateDeviceQueueItemRequest) GetItem() *DeviceQueueItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type CreateDeviceQueueItemResponse struct {
}

func (m *CreateDeviceQueueItemResponse) Reset()                    { *m = CreateDeviceQueueItemResponse{} }
func (m *CreateDeviceQueueItemResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceQueueItemResponse) ProtoMessage()               {}
func (*CreateDeviceQueueItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

type FlushDeviceQueueForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *FlushDeviceQueueForDevEUIRequest) Reset()         { *m = FlushDeviceQueueForDevEUIRequest{} }
func (m *FlushDeviceQueueForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*FlushDeviceQueueForDevEUIRequest) ProtoMessage()    {}
func (*FlushDeviceQueueForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64}
}

func (m *FlushDeviceQueueForDevEUIRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type FlushDeviceQueueForDevEUIResponse struct {
}

func (m *FlushDeviceQueueForDevEUIResponse) Reset()         { *m = FlushDeviceQueueForDevEUIResponse{} }
func (m *FlushDeviceQueueForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*FlushDeviceQueueForDevEUIResponse) ProtoMessage()    {}
func (*FlushDeviceQueueForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{65}
}

type GetDeviceQueueItemsForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetDeviceQueueItemsForDevEUIRequest) Reset()         { *m = GetDeviceQueueItemsForDevEUIRequest{} }
func (m *GetDeviceQueueItemsForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeviceQueueItemsForDevEUIRequest) ProtoMessage()    {}
func (*GetDeviceQueueItemsForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{66}
}

func (m *GetDeviceQueueItemsForDevEUIRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type GetDeviceQueueItemsForDevEUIResponse struct {
	Items []*DeviceQueueItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *GetDeviceQueueItemsForDevEUIResponse) Reset()         { *m = GetDeviceQueueItemsForDevEUIResponse{} }
func (m *GetDeviceQueueItemsForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeviceQueueItemsForDevEUIResponse) ProtoMessage()    {}
func (*GetDeviceQueueItemsForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{67}
}

func (m *GetDeviceQueueItemsForDevEUIResponse) GetItems() []*DeviceQueueItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetNextDownlinkFCntForDevEUIRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetNextDownlinkFCntForDevEUIRequest) Reset()         { *m = GetNextDownlinkFCntForDevEUIRequest{} }
func (m *GetNextDownlinkFCntForDevEUIRequest) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntForDevEUIRequest) ProtoMessage()    {}
func (*GetNextDownlinkFCntForDevEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{68}
}

func (m *GetNextDownlinkFCntForDevEUIRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type GetNextDownlinkFCntForDevEUIResponse struct {
	// The frame-counter to use.
	FCnt uint32 `protobuf:"varint,1,opt,name=fCnt" json:"fCnt,omitempty"`
}

func (m *GetNextDownlinkFCntForDevEUIResponse) Reset()         { *m = GetNextDownlinkFCntForDevEUIResponse{} }
func (m *GetNextDownlinkFCntForDevEUIResponse) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntForDevEUIResponse) ProtoMessage()    {}
func (*GetNextDownlinkFCntForDevEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{69}
}

func (m *GetNextDownlinkFCntForDevEUIResponse) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type StreamFrameLogsForGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *StreamFrameLogsForGatewayRequest) Reset()         { *m = StreamFrameLogsForGatewayRequest{} }
func (m *StreamFrameLogsForGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForGatewayRequest) ProtoMessage()    {}
func (*StreamFrameLogsForGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{70}
}

func (m *StreamFrameLogsForGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type StreamFrameLogsForGatewayResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplinkFrames" json:"uplinkFrames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlinkFrames" json:"downlinkFrames,omitempty"`
}

func (m *StreamFrameLogsForGatewayResponse) Reset()         { *m = StreamFrameLogsForGatewayResponse{} }
func (m *StreamFrameLogsForGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForGatewayResponse) ProtoMessage()    {}
func (*StreamFrameLogsForGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{71}
}

func (m *StreamFrameLogsForGatewayResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamFrameLogsForGatewayResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

type StreamFrameLogsForDeviceRequest struct {
	// DevEUI of the device.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *StreamFrameLogsForDeviceRequest) Reset()         { *m = StreamFrameLogsForDeviceRequest{} }
func (m *StreamFrameLogsForDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForDeviceRequest) ProtoMessage()    {}
func (*StreamFrameLogsForDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{72}
}

func (m *StreamFrameLogsForDeviceRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type StreamFrameLogsForDeviceResponse struct {
	// Contains zero or one uplink frame.
	UplinkFrames []*UplinkFrameLog `protobuf:"bytes,1,rep,name=uplinkFrames" json:"uplinkFrames,omitempty"`
	// Contains zero or one downlink frame.
	DownlinkFrames []*DownlinkFrameLog `protobuf:"bytes,2,rep,name=downlinkFrames" json:"downlinkFrames,omitempty"`
}

func (m *StreamFrameLogsForDeviceResponse) Reset()         { *m = StreamFrameLogsForDeviceResponse{} }
func (m *StreamFrameLogsForDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*StreamFrameLogsForDeviceResponse) ProtoMessage()    {}
func (*StreamFrameLogsForDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{73}
}

func (m *StreamFrameLogsForDeviceResponse) GetUplinkFrames() []*UplinkFrameLog {
	if m != nil {
		return m.UplinkFrames
	}
	return nil
}

func (m *StreamFrameLogsForDeviceResponse) GetDownlinkFrames() []*DownlinkFrameLog {
	if m != nil {
		return m.DownlinkFrames
	}
	return nil
}

type DataRate struct {
	// The used modulation (LORA or FSK).
	Modulation string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	// Bandwidth (in kHz).
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Used spread-factor.
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	// Bitrate (used for FSK modulation).
	Bitrate uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{74} }

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DataRate) GetSpreadFactor() uint32 {
	if m != nil {
		return m.SpreadFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type UplinkTXInfo struct {
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,1,opt,name=frequency" json:"frequency,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,2,opt,name=dataRate" json:"dataRate,omitempty"`
	// Code rate.
	CodeRate string `protobuf:"bytes,3,opt,name=codeRate" json:"codeRate,omitempty"`
}

func (m *UplinkTXInfo) Reset()                    { *m = UplinkTXInfo{} }
func (m *UplinkTXInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkTXInfo) ProtoMessage()               {}
func (*UplinkTXInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{75} }

func (m *UplinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *UplinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *UplinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

type UplinkRXInfo struct {
	// Gateway MAC.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Time when the frame was received (if available).
	Time string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// Time when the frame was received as time since GPS epoch (if available).
	TimeSinceGPSEpoch string `protobuf:"bytes,3,opt,name=timeSinceGPSEpoch" json:"timeSinceGPSEpoch,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,5,opt,name=rssi" json:"rssi,omitempty"`
	// LoRa SNR.
	LoRaSNR float32 `protobuf:"fixed32,6,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,7,opt,name=board" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna uint32 `protobuf:"varint,8,opt,name=antenna" json:"antenna,omitempty"`
}

func (m *UplinkRXInfo) Reset()                    { *m = UplinkRXInfo{} }
func (m *UplinkRXInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkRXInfo) ProtoMessage()               {}
func (*UplinkRXInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{76} }

func (m *UplinkRXInfo) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *UplinkRXInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *UplinkRXInfo) GetTimeSinceGPSEpoch() string {
	if m != nil {
		return m.TimeSinceGPSEpoch
	}
	return ""
}

func (m *UplinkRXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UplinkRXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *UplinkRXInfo) GetLoRaSNR() float32 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *UplinkRXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *UplinkRXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type UplinkFrameLog struct {
	// TX information of the uplink.
	TxInfo *UplinkTXInfo `protobuf:"bytes,1,opt,name=txInfo" json:"txInfo,omitempty"`
	// RX information of the uplink.
	RxInfo []*UplinkRXInfo `protobuf:"bytes,2,rep,name=rxInfo" json:"rxInfo,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayload []byte `protobuf:"bytes,3,opt,name=phyPayload,proto3" json:"phyPayload,omitempty"`
}

func (m *UplinkFrameLog) Reset()                    { *m = UplinkFrameLog{} }
func (m *UplinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*UplinkFrameLog) ProtoMessage()               {}
func (*UplinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{77} }

func (m *UplinkFrameLog) GetTxInfo() *UplinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetRxInfo() []*UplinkRXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetPhyPayload() []byte {
	if m != nil {
		return m.PhyPayload
	}
	return nil
}

type DownlinkTXInfo struct {
	// Gateway MAC.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Frame must be sent immediately.
	Immediately bool `protobuf:"varint,2,opt,name=immediately" json:"immediately,omitempty"`
	// Transmit frame at the given time since GPS epoch.
	TimeSinceGPSEpoch string `protobuf:"bytes,3,opt,name=timeSinceGPSEpoch" json:"timeSinceGPSEpoch,omitempty"`
	// Transmit the frame at the given gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency" json:"frequency,omitempty"`
	// TX power (in dBm).
	Power int32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,7,opt,name=dataRate" json:"dataRate,omitempty"`
	// Code rate.
	CodeRate string `protobuf:"bytes,8,opt,name=codeRate" json:"codeRate,omitempty"`
	// Lora modulation polarization inversion.
	IPol bool `protobuf:"varint,9,opt,name=iPol" json:"iPol,omitempty"`
	// The board identifier that received the uplink frame.
	Board uint32 `protobuf:"varint,10,opt,name=board" json:"board,omitempty"`
	// THe antenna identifier that received the uplink frame.
	Antenna uint32 `protobuf:"varint,11,opt,name=antenna" json:"antenna,omitempty"`
}

func (m *DownlinkTXInfo) Reset()                    { *m = DownlinkTXInfo{} }
func (m *DownlinkTXInfo) String() string            { return proto.CompactTextString(m) }
func (*DownlinkTXInfo) ProtoMessage()               {}
func (*DownlinkTXInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{78} }

func (m *DownlinkTXInfo) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *DownlinkTXInfo) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

func (m *DownlinkTXInfo) GetTimeSinceGPSEpoch() string {
	if m != nil {
		return m.TimeSinceGPSEpoch
	}
	return ""
}

func (m *DownlinkTXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DownlinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DownlinkTXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *DownlinkTXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *DownlinkTXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *DownlinkTXInfo) GetIPol() bool {
	if m != nil {
		return m.IPol
	}
	return false
}

func (m *DownlinkTXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *DownlinkTXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

type DownlinkFrameLog struct {
	// TX information of the downlink.
	TxInfo *DownlinkTXInfo `protobuf:"bytes,1,opt,name=txInfo" json:"txInfo,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayload []byte `protobuf:"bytes,2,opt,name=phyPayload,proto3" json:"phyPayload,omitempty"`
}

func (m *DownlinkFrameLog) Reset()                    { *m = DownlinkFrameLog{} }
func (m *DownlinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*DownlinkFrameLog) ProtoMessage()               {}
func (*DownlinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{79} }

func (m *DownlinkFrameLog) GetTxInfo() *DownlinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *DownlinkFrameLog) GetPhyPayload() []byte {
	if m != nil {
		return m.PhyPayload
	}
	return nil
}

type GatewayProfile struct {
	// ID of the gateway-profile.
	GatewayProfileID string `protobuf:"bytes,1,opt,name=gatewayProfileID" json:"gatewayProfileID,omitempty"`
	// Default channels (channels specified by the LoRaWAN Regional Parameters
	// specification) enabled for this configuration.
	Channels []int32 `protobuf:"varint,2,rep,packed,name=channels" json:"channels,omitempty"`
	// Extra channels added to the channel-configuration (in case the LoRaWAN
	// region supports adding custom channels).
	ExtraChannels []*GatewayProfileExtraChannel `protobuf:"bytes,3,rep,name=extraChannels" json:"extraChannels,omitempty"`
}

func (m *GatewayProfile) Reset()                    { *m = GatewayProfile{} }
func (m *GatewayProfile) String() string            { return proto.CompactTextString(m) }
func (*GatewayProfile) ProtoMessage()               {}
func (*GatewayProfile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{80} }

func (m *GatewayProfile) GetGatewayProfileID() string {
	if m != nil {
		return m.GatewayProfileID
	}
	return ""
}

func (m *GatewayProfile) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GatewayProfile) GetExtraChannels() []*GatewayProfileExtraChannel {
	if m != nil {
		return m.ExtraChannels
	}
	return nil
}

type GatewayProfileExtraChannel struct {
	// Modulation.
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,enum=ns.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency int32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Bandwidth.
	Bandwidth int32 `protobuf:"varint,3,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Bitrate (in case of FSK modulation).
	Bitrate int32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
	// Spreading factors (in case of LoRa modulation).
	SpreadingFactors []int32 `protobuf:"varint,5,rep,packed,name=spreadingFactors" json:"spreadingFactors,omitempty"`
}

func (m *GatewayProfileExtraChannel) Reset()                    { *m = GatewayProfileExtraChannel{} }
func (m *GatewayProfileExtraChannel) String() string            { return proto.CompactTextString(m) }
func (*GatewayProfileExtraChannel) ProtoMessage()               {}
func (*GatewayProfileExtraChannel) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{81} }

func (m *GatewayProfileExtraChannel) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *GatewayProfileExtraChannel) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *GatewayProfileExtraChannel) GetSpreadingFactors() []int32 {
	if m != nil {
		return m.SpreadingFactors
	}
	return nil
}

type CreateGatewayProfileRequest struct {
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gatewayProfile" json:"gatewayProfile,omitempty"`
}

func (m *CreateGatewayProfileRequest) Reset()                    { *m = CreateGatewayProfileRequest{} }
func (m *CreateGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayProfileRequest) ProtoMessage()               {}
func (*CreateGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{82} }

func (m *CreateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

type CreateGatewayProfileResponse struct {
	// ID of the create configuration object.
	GatewayProfileID string `protobuf:"bytes,1,opt,name=gatewayProfileID" json:"gatewayProfileID,omitempty"`
}

func (m *CreateGatewayProfileResponse) Reset()                    { *m = CreateGatewayProfileResponse{} }
func (m *CreateGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayProfileResponse) ProtoMessage()               {}
func (*CreateGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{83} }

func (m *CreateGatewayProfileResponse) GetGatewayProfileID() string {
	if m != nil {
		return m.GatewayProfileID
	}
	return ""
}

type GetGatewayProfileRequest struct {
	// ID of the gateway-profile.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetGatewayProfileRequest) Reset()                    { *m = GetGatewayProfileRequest{} }
func (m *GetGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayProfileRequest) ProtoMessage()               {}
func (*GetGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{84} }

func (m *GetGatewayProfileRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetGatewayProfileResponse struct {
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gatewayProfile" json:"gatewayProfile,omitempty"`
	CreatedAt      string          `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt      string          `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetGatewayProfileResponse) Reset()                    { *m = GetGatewayProfileResponse{} }
func (m *GetGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayProfileResponse) ProtoMessage()               {}
func (*GetGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{85} }

func (m *GetGatewayProfileResponse) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

func (m *GetGatewayProfileResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayProfileResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateGatewayProfileRequest struct {
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gatewayProfile" json:"gatewayProfile,omitempty"`
}

func (m *UpdateGatewayProfileRequest) Reset()                    { *m = UpdateGatewayProfileRequest{} }
func (m *UpdateGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayProfileRequest) ProtoMessage()               {}
func (*UpdateGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{86} }

func (m *UpdateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if m != nil {
		return m.GatewayProfile
	}
	return nil
}

type UpdateGatewayProfileResponse struct {
}

func (m *UpdateGatewayProfileResponse) Reset()                    { *m = UpdateGatewayProfileResponse{} }
func (m *UpdateGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayProfileResponse) ProtoMessage()               {}
func (*UpdateGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{87} }

type DeleteGatewayProfileRequest struct {
	// ID of the gateway-profile.
	GatewayProfileID string `protobuf:"bytes,1,opt,name=gatewayProfileID" json:"gatewayProfileID,omitempty"`
}

func (m *DeleteGatewayProfileRequest) Reset()                    { *m = DeleteGatewayProfileRequest{} }
func (m *DeleteGatewayProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayProfileRequest) ProtoMessage()               {}
func (*DeleteGatewayProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{88} }

func (m *DeleteGatewayProfileRequest) GetGatewayProfileID() string {
	if m != nil {
		return m.GatewayProfileID
	}
	return ""
}

type DeleteGatewayProfileResponse struct {
}

func (m *DeleteGatewayProfileResponse) Reset()                    { *m = DeleteGatewayProfileResponse{} }
func (m *DeleteGatewayProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayProfileResponse) ProtoMessage()               {}
func (*DeleteGatewayProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{89} }

func init() {
	proto.RegisterType((*CreateServiceProfileRequest)(nil), "ns.CreateServiceProfileRequest")
	proto.RegisterType((*CreateServiceProfileResponse)(nil), "ns.CreateServiceProfileResponse")
	proto.RegisterType((*GetServiceProfileRequest)(nil), "ns.GetServiceProfileRequest")
	proto.RegisterType((*GetServiceProfileResponse)(nil), "ns.GetServiceProfileResponse")
	proto.RegisterType((*UpdateServiceProfileRequest)(nil), "ns.UpdateServiceProfileRequest")
	proto.RegisterType((*UpdateServiceProfileResponse)(nil), "ns.UpdateServiceProfileResponse")
	proto.RegisterType((*DeleteServiceProfileRequest)(nil), "ns.DeleteServiceProfileRequest")
	proto.RegisterType((*DeleteServiceProfileResponse)(nil), "ns.DeleteServiceProfileResponse")
	proto.RegisterType((*RoutingProfile)(nil), "ns.RoutingProfile")
	proto.RegisterType((*CreateRoutingProfileRequest)(nil), "ns.CreateRoutingProfileRequest")
	proto.RegisterType((*CreateRoutingProfileResponse)(nil), "ns.CreateRoutingProfileResponse")
	proto.RegisterType((*GetRoutingProfileRequest)(nil), "ns.GetRoutingProfileRequest")
	proto.RegisterType((*GetRoutingProfileResponse)(nil), "ns.GetRoutingProfileResponse")
	proto.RegisterType((*UpdateRoutingProfileRequest)(nil), "ns.UpdateRoutingProfileRequest")
	proto.RegisterType((*UpdateRoutingProfileResponse)(nil), "ns.UpdateRoutingProfileResponse")
	proto.RegisterType((*DeleteRoutingProfileRequest)(nil), "ns.DeleteRoutingProfileRequest")
	proto.RegisterType((*DeleteRoutingProfileResponse)(nil), "ns.DeleteRoutingProfileResponse")
	proto.RegisterType((*CreateDeviceProfileRequest)(nil), "ns.CreateDeviceProfileRequest")
	proto.RegisterType((*CreateDeviceProfileResponse)(nil), "ns.CreateDeviceProfileResponse")
	proto.RegisterType((*GetDeviceProfileRequest)(nil), "ns.GetDeviceProfileRequest")
	proto.RegisterType((*GetDeviceProfileResponse)(nil), "ns.GetDeviceProfileResponse")
	proto.RegisterType((*UpdateDeviceProfileRequest)(nil), "ns.UpdateDeviceProfileRequest")
	proto.RegisterType((*UpdateDeviceProfileResponse)(nil), "ns.UpdateDeviceProfileResponse")
	proto.RegisterType((*DeleteDeviceProfileRequest)(nil), "ns.DeleteDeviceProfileRequest")
	proto.RegisterType((*DeleteDeviceProfileResponse)(nil), "ns.DeleteDeviceProfileResponse")
	proto.RegisterType((*Device)(nil), "ns.Device")
	proto.RegisterType((*CreateDeviceRequest)(nil), "ns.CreateDeviceRequest")
	proto.RegisterType((*CreateDeviceResponse)(nil), "ns.CreateDeviceResponse")
	proto.RegisterType((*GetDeviceRequest)(nil), "ns.GetDeviceRequest")
	proto.RegisterType((*GetDeviceResponse)(nil), "ns.GetDeviceResponse")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "ns.UpdateDeviceRequest")
	proto.RegisterType((*UpdateDeviceResponse)(nil), "ns.UpdateDeviceResponse")
	proto.RegisterType((*DeleteDeviceRequest)(nil), "ns.DeleteDeviceRequest")
	proto.RegisterType((*DeleteDeviceResponse)(nil), "ns.DeleteDeviceResponse")
	proto.RegisterType((*ActivateDeviceRequest)(nil), "ns.ActivateDeviceRequest")
	proto.RegisterType((*ActivateDeviceResponse)(nil), "ns.ActivateDeviceResponse")
	proto.RegisterType((*DeactivateDeviceRequest)(nil), "ns.DeactivateDeviceRequest")
	proto.RegisterType((*DeactivateDeviceResponse)(nil), "ns.DeactivateDeviceResponse")
	proto.RegisterType((*GetDeviceActivationRequest)(nil), "ns.GetDeviceActivationRequest")
	proto.RegisterType((*GetDeviceActivationResponse)(nil), "ns.GetDeviceActivationResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "ns.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "ns.GetRandomDevAddrResponse")
	proto.RegisterType((*CreateMACCommandQueueItemRequest)(nil), "ns.CreateMACCommandQueueItemRequest")
	proto.RegisterType((*CreateMACCommandQueueItemResponse)(nil), "ns.CreateMACCommandQueueItemResponse")
	proto.RegisterType((*SendProprietaryPayloadRequest)(nil), "ns.SendProprietaryPayloadRequest")
	proto.RegisterType((*SendProprietaryPayloadResponse)(nil), "ns.SendProprietaryPayloadResponse")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ns.CreateGatewayRequest")
	proto.RegisterType((*CreateGatewayResponse)(nil), "ns.CreateGatewayResponse")
	proto.RegisterType((*GetGatewayRequest)(nil), "ns.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "ns.GetGatewayResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ns.UpdateGatewayRequest")
	proto.RegisterType((*UpdateGatewayResponse)(nil), "ns.UpdateGatewayResponse")
	proto.RegisterType((*ListGatewayRequest)(nil), "ns.ListGatewayRequest")
	proto.RegisterType((*ListGatewayResponse)(nil), "ns.ListGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "ns.DeleteGatewayRequest")
	proto.RegisterType((*DeleteGatewayResponse)(nil), "ns.DeleteGatewayResponse")
	proto.RegisterType((*GatewayStats)(nil), "ns.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "ns.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "ns.GetGatewayStatsResponse")
	proto.RegisterType((*MigrateNodeToDeviceSessionRequest)(nil), "ns.MigrateNodeToDeviceSessionRequest")
	proto.RegisterType((*MigrateNodeToDeviceSessionResponse)(nil), "ns.MigrateNodeToDeviceSessionResponse")
	proto.RegisterType((*DeviceQueueItem)(nil), "ns.DeviceQueueItem")
	proto.RegisterType((*CreateDeviceQueueItemRequest)(nil), "ns.CreateDeviceQueueItemRequest")
	proto.RegisterType((*CreateDeviceQueueItemResponse)(nil), "ns.CreateDeviceQueueItemResponse")
	proto.RegisterType((*FlushDeviceQueueForDevEUIRequest)(nil), "ns.FlushDeviceQueueForDevEUIRequest")
	proto.RegisterType((*FlushDeviceQueueForDevEUIResponse)(nil), "ns.FlushDeviceQueueForDevEUIResponse")
	proto.RegisterType((*GetDeviceQueueItemsForDevEUIRequest)(nil), "ns.GetDeviceQueueItemsForDevEUIRequest")
	proto.RegisterType((*GetDeviceQueueItemsForDevEUIResponse)(nil), "ns.GetDeviceQueueItemsForDevEUIResponse")
	proto.RegisterType((*GetNextDownlinkFCntForDevEUIRequest)(nil), "ns.GetNextDownlinkFCntForDevEUIRequest")
	proto.RegisterType((*GetNextDownlinkFCntForDevEUIResponse)(nil), "ns.GetNextDownlinkFCntForDevEUIResponse")
	proto.RegisterType((*StreamFrameLogsForGatewayRequest)(nil), "ns.StreamFrameLogsForGatewayRequest")
	proto.RegisterType((*StreamFrameLogsForGatewayResponse)(nil), "ns.StreamFrameLogsForGatewayResponse")
	proto.RegisterType((*StreamFrameLogsForDeviceRequest)(nil), "ns.StreamFrameLogsForDeviceRequest")
	proto.RegisterType((*StreamFrameLogsForDeviceResponse)(nil), "ns.StreamFrameLogsForDeviceResponse")
	proto.RegisterType((*DataRate)(nil), "ns.DataRate")
	proto.RegisterType((*UplinkTXInfo)(nil), "ns.UplinkTXInfo")
	proto.RegisterType((*UplinkRXInfo)(nil), "ns.UplinkRXInfo")
	proto.RegisterType((*UplinkFrameLog)(nil), "ns.UplinkFrameLog")
	proto.RegisterType((*DownlinkTXInfo)(nil), "ns.DownlinkTXInfo")
	proto.RegisterType((*DownlinkFrameLog)(nil), "ns.DownlinkFrameLog")
	proto.RegisterType((*GatewayProfile)(nil), "ns.GatewayProfile")
	proto.RegisterType((*GatewayProfileExtraChannel)(nil), "ns.GatewayProfileExtraChannel")
	proto.RegisterType((*CreateGatewayProfileRequest)(nil), "ns.CreateGatewayProfileRequest")
	proto.RegisterType((*CreateGatewayProfileResponse)(nil), "ns.CreateGatewayProfileResponse")
	proto.RegisterType((*GetGatewayProfileRequest)(nil), "ns.GetGatewayProfileRequest")
	proto.RegisterType((*GetGatewayProfileResponse)(nil), "ns.GetGatewayProfileResponse")
	proto.RegisterType((*UpdateGatewayProfileRequest)(nil), "ns.UpdateGatewayProfileRequest")
	proto.RegisterType((*UpdateGatewayProfileResponse)(nil), "ns.UpdateGatewayProfileResponse")
	proto.RegisterType((*DeleteGatewayProfileRequest)(nil), "ns.DeleteGatewayProfileRequest")
	proto.RegisterType((*DeleteGatewayProfileResponse)(nil), "ns.DeleteGatewayProfileResponse")
	proto.RegisterEnum("ns.RXWindow", RXWindow_name, RXWindow_value)
	proto.RegisterEnum("ns.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("ns.AggregationInterval", AggregationInterval_name, AggregationInterval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServer service

type NetworkServerClient interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*UpdateRoutingProfileResponse, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*DeleteRoutingProfileResponse, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*UpdateDeviceProfileResponse, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*DeleteDeviceProfileResponse, error)
	// CreateDevice creates the given device.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*DeactivateDeviceResponse, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*CreateDeviceQueueItemResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*FlushDeviceQueueForDevEUIResponse, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*CreateMACCommandQueueItemResponse, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*SendProprietaryPayloadResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error)
	// ListGateways returns the existing gateways.
	ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*UpdateGatewayProfileResponse, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*DeleteGatewayProfileResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// MigrateNodeToDeviceSession. This method is for internal us only.
	MigrateNodeToDeviceSession(ctx context.Context, in *MigrateNodeToDeviceSessionRequest, opts ...grpc.CallOption) (*MigrateNodeToDeviceSessionResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServer_StreamFrameLogsForGatewayClient, error)
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServer_StreamFrameLogsForDeviceClient, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error) {
	out := new(UpdateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error) {
	out := new(DeleteServiceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteServiceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error) {
	out := new(CreateRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error) {
	out := new(GetRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*UpdateRoutingProfileResponse, error) {
	out := new(UpdateRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*DeleteRoutingProfileResponse, error) {
	out := new(DeleteRoutingProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteRoutingProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error) {
	out := new(CreateDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error) {
	out := new(GetDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*UpdateDeviceProfileResponse, error) {
	out := new(UpdateDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*DeleteDeviceProfileResponse, error) {
	out := new(DeleteDeviceProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteDeviceProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*ActivateDeviceResponse, error) {
	out := new(ActivateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/ActivateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*DeactivateDeviceResponse, error) {
	out := new(DeactivateDeviceResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeactivateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error) {
	out := new(GetDeviceActivationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetDeviceActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*CreateDeviceQueueItemResponse, error) {
	out := new(CreateDeviceQueueItemResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateDeviceQueueItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*FlushDeviceQueueForDevEUIResponse, error) {
	out := new(FlushDeviceQueueForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/FlushDeviceQueueForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error) {
	out := new(GetDeviceQueueItemsForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetDeviceQueueItemsForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error) {
	out := new(GetNextDownlinkFCntForDevEUIResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetNextDownlinkFCntForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*CreateMACCommandQueueItemResponse, error) {
	out := new(CreateMACCommandQueueItemResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateMACCommandQueueItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*SendProprietaryPayloadResponse, error) {
	out := new(SendProprietaryPayloadResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/SendProprietaryPayload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error) {
	out := new(CreateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error) {
	out := new(UpdateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error) {
	out := new(DeleteGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error) {
	out := new(CreateGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error) {
	out := new(GetGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*UpdateGatewayProfileResponse, error) {
	out := new(UpdateGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*DeleteGatewayProfileResponse, error) {
	out := new(DeleteGatewayProfileResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteGatewayProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetGatewayStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) MigrateNodeToDeviceSession(ctx context.Context, in *MigrateNodeToDeviceSessionRequest, opts ...grpc.CallOption) (*MigrateNodeToDeviceSessionResponse, error) {
	out := new(MigrateNodeToDeviceSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/MigrateNodeToDeviceSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServer_StreamFrameLogsForGatewayClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkServer_serviceDesc.Streams[0], c.cc, "/ns.NetworkServer/StreamFrameLogsForGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerStreamFrameLogsForGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServer_StreamFrameLogsForGatewayClient interface {
	Recv() (*StreamFrameLogsForGatewayResponse, error)
	grpc.ClientStream
}

type networkServerStreamFrameLogsForGatewayClient struct {
	grpc.ClientStream
}

func (x *networkServerStreamFrameLogsForGatewayClient) Recv() (*StreamFrameLogsForGatewayResponse, error) {
	m := new(StreamFrameLogsForGatewayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServerClient) StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServer_StreamFrameLogsForDeviceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkServer_serviceDesc.Streams[1], c.cc, "/ns.NetworkServer/StreamFrameLogsForDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerStreamFrameLogsForDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServer_StreamFrameLogsForDeviceClient interface {
	Recv() (*StreamFrameLogsForDeviceResponse, error)
	grpc.ClientStream
}

type networkServerStreamFrameLogsForDeviceClient struct {
	grpc.ClientStream
}

func (x *networkServerStreamFrameLogsForDeviceClient) Recv() (*StreamFrameLogsForDeviceResponse, error) {
	m := new(StreamFrameLogsForDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(context.Context, *UpdateServiceProfileRequest) (*UpdateServiceProfileResponse, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(context.Context, *DeleteServiceProfileRequest) (*DeleteServiceProfileResponse, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(context.Context, *UpdateRoutingProfileRequest) (*UpdateRoutingProfileResponse, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(context.Context, *DeleteRoutingProfileRequest) (*DeleteRoutingProfileResponse, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(context.Context, *CreateDeviceProfileRequest) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(context.Context, *GetDeviceProfileRequest) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(context.Context, *UpdateDeviceProfileRequest) (*UpdateDeviceProfileResponse, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(context.Context, *DeleteDeviceProfileRequest) (*DeleteDeviceProfileResponse, error)
	// CreateDevice creates the given device.
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(context.Context, *ActivateDeviceRequest) (*ActivateDeviceResponse, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(context.Context, *DeactivateDeviceRequest) (*DeactivateDeviceResponse, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(context.Context, *GetDeviceActivationRequest) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(context.Context, *CreateDeviceQueueItemRequest) (*CreateDeviceQueueItemResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(context.Context, *FlushDeviceQueueForDevEUIRequest) (*FlushDeviceQueueForDevEUIResponse, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(context.Context, *GetDeviceQueueItemsForDevEUIRequest) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	GetNextDownlinkFCntForDevEUI(context.Context, *GetNextDownlinkFCntForDevEUIRequest) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(context.Context, *CreateMACCommandQueueItemRequest) (*CreateMACCommandQueueItemResponse, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(context.Context, *SendProprietaryPayloadRequest) (*SendProprietaryPayloadResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(context.Context, *CreateGatewayRequest) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*UpdateGatewayResponse, error)
	// ListGateways returns the existing gateways.
	ListGateways(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*DeleteGatewayResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(context.Context, *CreateGatewayProfileRequest) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(context.Context, *GetGatewayProfileRequest) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(context.Context, *UpdateGatewayProfileRequest) (*UpdateGatewayProfileResponse, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(context.Context, *DeleteGatewayProfileRequest) (*DeleteGatewayProfileResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// MigrateNodeToDeviceSession. This method is for internal us only.
	MigrateNodeToDeviceSession(context.Context, *MigrateNodeToDeviceSessionRequest) (*MigrateNodeToDeviceSessionResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(*StreamFrameLogsForGatewayRequest, NetworkServer_StreamFrameLogsForGatewayServer) error
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(*StreamFrameLogsForDeviceRequest, NetworkServer_StreamFrameLogsForDeviceServer) error
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_CreateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateServiceProfile(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetServiceProfile(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateServiceProfile(ctx, req.(*UpdateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteServiceProfile(ctx, req.(*DeleteServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateRoutingProfile(ctx, req.(*CreateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetRoutingProfile(ctx, req.(*GetRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateRoutingProfile(ctx, req.(*UpdateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteRoutingProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteRoutingProfile(ctx, req.(*DeleteRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateDeviceProfile(ctx, req.(*CreateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDeviceProfile(ctx, req.(*GetDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateDeviceProfile(ctx, req.(*UpdateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteDeviceProfile(ctx, req.(*DeleteDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/ActivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).ActivateDevice(ctx, req.(*ActivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeactivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeactivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeactivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeactivateDevice(ctx, req.(*DeactivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetDeviceActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDeviceActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetDeviceActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDeviceActivation(ctx, req.(*GetDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateDeviceQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateDeviceQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateDeviceQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateDeviceQueueItem(ctx, req.(*CreateDeviceQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_FlushDeviceQueueForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushDeviceQueueForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).FlushDeviceQueueForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/FlushDeviceQueueForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).FlushDeviceQueueForDevEUI(ctx, req.(*FlushDeviceQueueForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetDeviceQueueItemsForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceQueueItemsForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDeviceQueueItemsForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetDeviceQueueItemsForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDeviceQueueItemsForDevEUI(ctx, req.(*GetDeviceQueueItemsForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetNextDownlinkFCntForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextDownlinkFCntForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetNextDownlinkFCntForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetNextDownlinkFCntForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetNextDownlinkFCntForDevEUI(ctx, req.(*GetNextDownlinkFCntForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateMACCommandQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMACCommandQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateMACCommandQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateMACCommandQueueItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateMACCommandQueueItem(ctx, req.(*CreateMACCommandQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_SendProprietaryPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProprietaryPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).SendProprietaryPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/SendProprietaryPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).SendProprietaryPayload(ctx, req.(*SendProprietaryPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).ListGateways(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateGatewayProfile(ctx, req.(*CreateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetGatewayProfile(ctx, req.(*GetGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateGatewayProfile(ctx, req.(*UpdateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteGatewayProfile(ctx, req.(*DeleteGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetGatewayStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetGatewayStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_MigrateNodeToDeviceSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateNodeToDeviceSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).MigrateNodeToDeviceSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/MigrateNodeToDeviceSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).MigrateNodeToDeviceSession(ctx, req.(*MigrateNodeToDeviceSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_StreamFrameLogsForGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForGatewayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServer).StreamFrameLogsForGateway(m, &networkServerStreamFrameLogsForGatewayServer{stream})
}

type NetworkServer_StreamFrameLogsForGatewayServer interface {
	Send(*StreamFrameLogsForGatewayResponse) error
	grpc.ServerStream
}

type networkServerStreamFrameLogsForGatewayServer struct {
	grpc.ServerStream
}

func (x *networkServerStreamFrameLogsForGatewayServer) Send(m *StreamFrameLogsForGatewayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServer_StreamFrameLogsForDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServer).StreamFrameLogsForDevice(m, &networkServerStreamFrameLogsForDeviceServer{stream})
}

type NetworkServer_StreamFrameLogsForDeviceServer interface {
	Send(*StreamFrameLogsForDeviceResponse) error
	grpc.ServerStream
}

type networkServerStreamFrameLogsForDeviceServer struct {
	grpc.ServerStream
}

func (x *networkServerStreamFrameLogsForDeviceServer) Send(m *StreamFrameLogsForDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceProfile",
			Handler:    _NetworkServer_CreateServiceProfile_Handler,
		},
		{
			MethodName: "GetServiceProfile",
			Handler:    _NetworkServer_GetServiceProfile_Handler,
		},
		{
			MethodName: "UpdateServiceProfile",
			Handler:    _NetworkServer_UpdateServiceProfile_Handler,
		},
		{
			MethodName: "DeleteServiceProfile",
			Handler:    _NetworkServer_DeleteServiceProfile_Handler,
		},
		{
			MethodName: "CreateRoutingProfile",
			Handler:    _NetworkServer_CreateRoutingProfile_Handler,
		},
		{
			MethodName: "GetRoutingProfile",
			Handler:    _NetworkServer_GetRoutingProfile_Handler,
		},
		{
			MethodName: "UpdateRoutingProfile",
			Handler:    _NetworkServer_UpdateRoutingProfile_Handler,
		},
		{
			MethodName: "DeleteRoutingProfile",
			Handler:    _NetworkServer_DeleteRoutingProfile_Handler,
		},
		{
			MethodName: "CreateDeviceProfile",
			Handler:    _NetworkServer_CreateDeviceProfile_Handler,
		},
		{
			MethodName: "GetDeviceProfile",
			Handler:    _NetworkServer_GetDeviceProfile_Handler,
		},
		{
			MethodName: "UpdateDeviceProfile",
			Handler:    _NetworkServer_UpdateDeviceProfile_Handler,
		},
		{
			MethodName: "DeleteDeviceProfile",
			Handler:    _NetworkServer_DeleteDeviceProfile_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _NetworkServer_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _NetworkServer_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _NetworkServer_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _NetworkServer_DeleteDevice_Handler,
		},
		{
			MethodName: "ActivateDevice",
			Handler:    _NetworkServer_ActivateDevice_Handler,
		},
		{
			MethodName: "DeactivateDevice",
			Handler:    _NetworkServer_DeactivateDevice_Handler,
		},
		{
			MethodName: "GetDeviceActivation",
			Handler:    _NetworkServer_GetDeviceActivation_Handler,
		},
		{
			MethodName: "CreateDeviceQueueItem",
			Handler:    _NetworkServer_CreateDeviceQueueItem_Handler,
		},
		{
			MethodName: "FlushDeviceQueueForDevEUI",
			Handler:    _NetworkServer_FlushDeviceQueueForDevEUI_Handler,
		},
		{
			MethodName: "GetDeviceQueueItemsForDevEUI",
			Handler:    _NetworkServer_GetDeviceQueueItemsForDevEUI_Handler,
		},
		{
			MethodName: "GetNextDownlinkFCntForDevEUI",
			Handler:    _NetworkServer_GetNextDownlinkFCntForDevEUI_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NetworkServer_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "CreateMACCommandQueueItem",
			Handler:    _NetworkServer_CreateMACCommandQueueItem_Handler,
		},
		{
			MethodName: "SendProprietaryPayload",
			Handler:    _NetworkServer_SendProprietaryPayload_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServer_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServer_GetGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServer_UpdateGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _NetworkServer_ListGateways_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServer_DeleteGateway_Handler,
		},
		{
			MethodName: "CreateGatewayProfile",
			Handler:    _NetworkServer_CreateGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayProfile",
			Handler:    _NetworkServer_GetGatewayProfile_Handler,
		},
		{
			MethodName: "UpdateGatewayProfile",
			Handler:    _NetworkServer_UpdateGatewayProfile_Handler,
		},
		{
			MethodName: "DeleteGatewayProfile",
			Handler:    _NetworkServer_DeleteGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayStats",
			Handler:    _NetworkServer_GetGatewayStats_Handler,
		},
		{
			MethodName: "MigrateNodeToDeviceSession",
			Handler:    _NetworkServer_MigrateNodeToDeviceSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogsForGateway",
			Handler:       _NetworkServer_StreamFrameLogsForGateway_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamFrameLogsForDevice",
			Handler:       _NetworkServer_StreamFrameLogsForDevice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ns.proto",
}

func init() { proto.RegisterFile("ns.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3a, 0xcd, 0x6f, 0xe3, 0xc6,
	0xf5, 0xa6, 0x64, 0xd9, 0xf2, 0xb3, 0xa5, 0x28, 0x63, 0xaf, 0x2d, 0x73, 0xfd, 0x21, 0x73, 0x37,
	0x89, 0x7f, 0xc6, 0xaf, 0x8b, 0xc4, 0x09, 0x52, 0x64, 0xd1, 0x1c, 0x54, 0xc9, 0x76, 0xdc, 0x5d,
	0x7f, 0x64, 0x64, 0x23, 0xbb, 0x58, 0x20, 0x00, 0x57, 0x1c, 0xcb, 0x8c, 0x25, 0x52, 0x25, 0x29,
	0x7b, 0xf7, 0x5e, 0xf4, 0x5a, 0x14, 0xbd, 0xb4, 0x97, 0x1e, 0xda, 0x63, 0xcf, 0x3d, 0xf6, 0xd8,
	0x6b, 0xfe, 0x84, 0x1e, 0x8b, 0x1e, 0x7a, 0xee, 0xb9, 0x98, 0x0f, 0x92, 0x43, 0x6a, 0x48, 0xd9,
	0xf5, 0x02, 0x0d, 0xd0, 0x1b, 0xe7, 0xbd, 0x37, 0xef, 0x6b, 0xde, 0xbc, 0x79, 0x33, 0x8f, 0x50,
	0x76, 0xfc, 0x27, 0x43, 0xcf, 0x0d, 0x5c, 0x54, 0x70, 0x7c, 0xbd, 0x3a, 0xf4, 0xdc, 0x0b, 0xbb,
	0x4f, 0x04, 0xcc, 0x78, 0x09, 0x0f, 0x5b, 0x1e, 0x31, 0x03, 0xd2, 0x21, 0xde, 0xb5, 0xdd, 0x25,
	0xa7, 0x1c, 0x8d, 0xc9, 0xcf, 0x47, 0xc4, 0x0f, 0xd0, 0x53, 0xa8, 0xfa, 0x09, 0x44, 0x5d, 0x6b,
	0x68, 0xdb, 0xf3, 0xbb, 0xe8, 0x89, 0xe3, 0x3f, 0x49, 0x4d, 0x49, 0x51, 0x1a, 0x3f, 0x83, 0x35,
	0x35, 0x6b, 0x7f, 0xe8, 0x3a, 0x3e, 0x41, 0x3b, 0x50, 0x4b, 0xce, 0x38, 0x6c, 0x33, 0xee, 0x73,
	0x78, 0x0c, 0x6e, 0xec, 0x43, 0xfd, 0x80, 0x04, 0x6a, 0x1d, 0xef, 0xc2, 0xe7, 0x37, 0x1a, 0xac,
	0x2a, 0x18, 0x09, 0x8d, 0xee, 0x61, 0x2d, 0x5a, 0x83, 0xb9, 0x2e, 0xb3, 0xd6, 0x6a, 0x06, 0xf5,
	0x02, 0x13, 0x1f, 0x03, 0x28, 0x76, 0x34, 0xb4, 0x04, 0xb6, 0xc8, 0xb1, 0x11, 0x80, 0x2e, 0xc2,
	0x39, 0x1b, 0xbc, 0xfb, 0x45, 0xd8, 0x80, 0x35, 0x35, 0x6b, 0x6e, 0xb2, 0x71, 0x08, 0x0f, 0xdb,
	0xa4, 0x4f, 0xb2, 0x44, 0xdf, 0xc5, 0xb7, 0x1b, 0xb0, 0xa6, 0x66, 0x25, 0x44, 0x9d, 0x42, 0x15,
	0xbb, 0xa3, 0xc0, 0x76, 0x7a, 0xa1, 0xcf, 0x76, 0xa0, 0xe6, 0x25, 0x20, 0x31, 0xf7, 0x34, 0x1c,
	0x21, 0x98, 0x36, 0xfd, 0xc3, 0xb6, 0x70, 0x2d, 0xfb, 0x36, 0xfe, 0xa8, 0x85, 0xd1, 0x9b, 0x64,
	0x2c, 0x39, 0x2e, 0xc9, 0x47, 0x76, 0x5c, 0x6a, 0x4a, 0x8a, 0x12, 0x2d, 0xc3, 0x4c, 0xd7, 0x6c,
	0x11, 0x2f, 0x5c, 0x4c, 0x31, 0x42, 0x75, 0x98, 0x0d, 0xfa, 0x3e, 0x43, 0xf0, 0x75, 0x0c, 0x87,
	0x74, 0x46, 0xd0, 0xf7, 0x9f, 0x91, 0xb7, 0xf5, 0x69, 0x3e, 0x83, 0x8f, 0xe2, 0x7d, 0x90, 0x56,
	0x32, 0xde, 0x07, 0xb7, 0xf5, 0x82, 0xd8, 0x07, 0x6a, 0x6b, 0xef, 0xc2, 0xe7, 0xaf, 0x7c, 0x1f,
	0x64, 0x68, 0x74, 0x1f, 0xbf, 0xdd, 0x63, 0x1f, 0x48, 0x3e, 0x9f, 0xce, 0xf2, 0x79, 0x29, 0xe1,
	0x73, 0x16, 0x01, 0x3c, 0xbe, 0x7f, 0xc8, 0x11, 0x10, 0x6d, 0x42, 0xb5, 0xbf, 0xe3, 0x4d, 0x78,
	0xff, 0x85, 0x8d, 0x36, 0x61, 0x86, 0xa8, 0x73, 0xd0, 0x79, 0x30, 0xb6, 0x89, 0x62, 0xbb, 0xff,
	0x18, 0x2a, 0x16, 0x19, 0x4f, 0x34, 0xef, 0x53, 0x6f, 0x25, 0x27, 0x24, 0xe9, 0x8c, 0x83, 0x70,
	0x23, 0xa6, 0xd8, 0x8a, 0x80, 0xda, 0x86, 0xf7, 0x12, 0xf4, 0x91, 0x01, 0x69, 0xb0, 0xd1, 0x82,
	0x95, 0x03, 0x12, 0x28, 0x95, 0xbb, 0x3d, 0x93, 0x5f, 0x69, 0x6c, 0x9b, 0xa8, 0x75, 0xf9, 0x4f,
	0x6d, 0xbc, 0x57, 0x86, 0x3f, 0x07, 0x9d, 0x47, 0xc0, 0xbb, 0x75, 0xfb, 0x7a, 0x18, 0xfd, 0x4a,
	0x53, 0x8d, 0x7d, 0xd0, 0x79, 0x30, 0xdc, 0xd3, 0x9f, 0xeb, 0x61, 0x7c, 0xaa, 0xc5, 0xfc, 0x41,
	0x83, 0x19, 0x8e, 0xa1, 0x3b, 0xc0, 0x22, 0xd7, 0x7b, 0xe7, 0x87, 0x8c, 0xd5, 0x02, 0x16, 0x23,
	0x95, 0xac, 0x82, 0x52, 0x96, 0xf2, 0xc4, 0x29, 0xaa, 0x4f, 0x1c, 0xe5, 0xc6, 0x98, 0xce, 0xd8,
	0x18, 0x5f, 0xc0, 0xa2, 0x1c, 0xa1, 0xa1, 0x13, 0x0c, 0xa6, 0xb0, 0xdd, 0x0d, 0x7d, 0x0e, 0xb1,
	0xcf, 0xb1, 0xc0, 0x18, 0xcb, 0xb0, 0x94, 0x9c, 0x2a, 0xec, 0xde, 0x81, 0x5a, 0x14, 0x65, 0x21,
	0xbf, 0x0c, 0x07, 0x18, 0x3e, 0xbc, 0x2f, 0xd1, 0x8a, 0x50, 0xbc, 0x85, 0xf0, 0x7b, 0x45, 0xdd,
	0x17, 0xb0, 0x28, 0x87, 0xc7, 0x1d, 0x6d, 0x4e, 0x4e, 0x15, 0x36, 0xff, 0x08, 0x16, 0xe5, 0x50,
	0x98, 0x64, 0xf6, 0x32, 0x2c, 0x25, 0xc9, 0x05, 0x9b, 0xbf, 0x68, 0xf0, 0xa0, 0xd9, 0x0d, 0xec,
	0x6b, 0xf3, 0x96, 0x9c, 0x68, 0xd6, 0xb5, 0xc8, 0x75, 0xd3, 0xb2, 0x3c, 0xe6, 0x85, 0x05, 0x1c,
	0x0e, 0x29, 0xc6, 0xb9, 0xb9, 0xea, 0xd0, 0xb4, 0x5b, 0xe4, 0x18, 0x31, 0xa4, 0xbc, 0x2e, 0x5a,
	0x4e, 0x70, 0x3e, 0x64, 0x51, 0x51, 0xc1, 0x62, 0x84, 0x74, 0x28, 0xd3, 0xaf, 0xb6, 0x7b, 0xe3,
	0xb0, 0x03, 0xa5, 0x82, 0xa3, 0x31, 0x7a, 0x0c, 0x15, 0xff, 0xca, 0x1e, 0xee, 0xb7, 0x9c, 0xa0,
	0x75, 0x49, 0xba, 0x57, 0xf5, 0x99, 0x86, 0xb6, 0x5d, 0xc6, 0x49, 0xa0, 0x51, 0x87, 0xe5, 0xb4,
	0xfa, 0xc2, 0xb2, 0x4f, 0x60, 0xa5, 0x4d, 0xcc, 0xbb, 0x98, 0x66, 0xe8, 0x50, 0x1f, 0x9f, 0x22,
	0xd8, 0x7d, 0x06, 0x7a, 0x14, 0x37, 0x42, 0xa2, 0xed, 0x3a, 0x93, 0x38, 0xfe, 0x49, 0x83, 0x87,
	0xca, 0x69, 0x22, 0xf0, 0x24, 0x67, 0x6a, 0x99, 0xce, 0x2c, 0x64, 0x39, 0xb3, 0x98, 0xe9, 0xcc,
	0xe9, 0x49, 0xce, 0x2c, 0xa9, 0x9c, 0xb9, 0xca, 0x72, 0x3e, 0x36, 0x1d, 0xcb, 0x1d, 0xb4, 0xb9,
	0x1e, 0xc2, 0x40, 0xe3, 0x33, 0x5e, 0xef, 0x24, 0x51, 0x93, 0x8c, 0x30, 0x2e, 0xa1, 0xc1, 0x37,
	0xec, 0x51, 0xb3, 0xd5, 0x72, 0x07, 0x03, 0xd3, 0xb1, 0xbe, 0x1e, 0x91, 0x11, 0x39, 0x0c, 0xc8,
	0x60, 0x52, 0x9c, 0xd5, 0xa0, 0xd8, 0xb5, 0x2d, 0x61, 0x09, 0xfd, 0xa4, 0x06, 0x76, 0x39, 0x13,
	0xbf, 0x5e, 0x6a, 0x14, 0xb7, 0x17, 0x70, 0x34, 0x36, 0x1e, 0xc1, 0x56, 0x8e, 0x24, 0xb1, 0x86,
	0x7f, 0xd6, 0x60, 0xbd, 0x43, 0x1c, 0xeb, 0xd4, 0x73, 0x87, 0x9e, 0x4d, 0x02, 0xd3, 0x7b, 0x7b,
	0x6a, 0xbe, 0xed, 0xbb, 0xa6, 0x15, 0x2a, 0xb3, 0x01, 0x30, 0x30, 0xbb, 0x02, 0x28, 0x14, 0x92,
	0x20, 0x54, 0xa9, 0x81, 0xdd, 0x15, 0x2b, 0x42, 0x3f, 0x51, 0x03, 0xe6, 0x7b, 0x66, 0x40, 0x6e,
	0xcc, 0xb7, 0x47, 0xcd, 0x96, 0x5f, 0x2f, 0x32, 0xbd, 0x64, 0x10, 0x2d, 0x98, 0xed, 0x53, 0xb7,
	0xcf, 0x2c, 0x29, 0x63, 0xf6, 0x4d, 0xd3, 0xc5, 0x85, 0x47, 0x65, 0x3a, 0xdd, 0xb7, 0x22, 0xf2,
	0x63, 0x00, 0xaa, 0x42, 0xc1, 0xf2, 0x58, 0xbc, 0x57, 0x70, 0xc1, 0xf2, 0x8c, 0x06, 0x6c, 0x64,
	0xa9, 0x2d, 0x2c, 0xfb, 0xa7, 0x16, 0xa6, 0xc6, 0x03, 0x2e, 0x39, 0x34, 0x88, 0x2a, 0x6c, 0x76,
	0x85, 0x25, 0xf4, 0x93, 0xaa, 0xe3, 0x98, 0x03, 0x12, 0xd6, 0xef, 0xf4, 0x9b, 0x1a, 0x61, 0x11,
	0xbf, 0xeb, 0xd9, 0x43, 0x1a, 0x9d, 0x22, 0x7f, 0xc9, 0x20, 0xea, 0xfb, 0xbe, 0x19, 0xd8, 0xc1,
	0xc8, 0x22, 0xcc, 0x10, 0x0d, 0x47, 0x63, 0x6a, 0x4c, 0xdf, 0x75, 0x7a, 0x1c, 0x59, 0x62, 0xc8,
	0x18, 0x40, 0x67, 0x9a, 0x7d, 0x31, 0x73, 0x86, 0xcf, 0x0c, 0xc7, 0xe8, 0x73, 0x58, 0xee, 0x5e,
	0x9a, 0x8e, 0x43, 0xfa, 0x2d, 0xd7, 0xb9, 0xb0, 0x7b, 0x23, 0x8f, 0x6d, 0x8f, 0xc3, 0x76, 0x7d,
	0xb6, 0xa1, 0x6d, 0x17, 0x71, 0x06, 0xd6, 0x58, 0x81, 0x07, 0x29, 0x6b, 0x85, 0x1f, 0x3e, 0x60,
	0xd9, 0x7d, 0x92, 0x0f, 0x8c, 0x7f, 0x14, 0x00, 0xc9, 0x74, 0x22, 0x90, 0x7f, 0xd8, 0xce, 0x4a,
	0x1c, 0x40, 0xb3, 0xb9, 0x07, 0x50, 0x39, 0x5d, 0xd0, 0x37, 0x60, 0xfe, 0xc2, 0xf6, 0xfc, 0xa0,
	0x43, 0x88, 0xd3, 0x0c, 0xea, 0x73, 0x5c, 0x67, 0x09, 0x44, 0x23, 0xbf, 0x6f, 0x46, 0x04, 0xc0,
	0x08, 0x24, 0x48, 0xce, 0x52, 0xcd, 0xe7, 0x2e, 0x15, 0x8d, 0x4c, 0x7e, 0x80, 0xfd, 0xaf, 0x44,
	0x66, 0xca, 0x5a, 0x11, 0x99, 0x3f, 0x05, 0xf4, 0xdc, 0xf6, 0xd3, 0xa1, 0xb9, 0x04, 0xa5, 0xbe,
	0x3d, 0xb0, 0x03, 0xe6, 0x86, 0x12, 0xe6, 0x03, 0x9a, 0x12, 0xdd, 0x8b, 0x0b, 0x9f, 0xf0, 0x3a,
	0xa3, 0x84, 0xc5, 0xc8, 0x20, 0xb0, 0x98, 0xe0, 0x21, 0xc2, 0x76, 0x03, 0x20, 0x70, 0x03, 0xb3,
	0xdf, 0x72, 0x47, 0x4e, 0xc8, 0x49, 0x82, 0xa0, 0x27, 0x30, 0xe3, 0x11, 0x7f, 0xd4, 0xa7, 0xec,
	0x8a, 0xdb, 0xf3, 0xbb, 0xcb, 0xb4, 0xcc, 0x18, 0x0f, 0x7f, 0x2c, 0xa8, 0x8c, 0xed, 0xb0, 0x56,
	0x98, 0xb8, 0x8f, 0x56, 0xe0, 0x41, 0x8a, 0x52, 0x58, 0xfb, 0x77, 0x0d, 0x16, 0x04, 0xac, 0x13,
	0x98, 0x81, 0x4f, 0x57, 0x22, 0xb0, 0x07, 0xc4, 0x0f, 0xcc, 0xc1, 0x50, 0x54, 0xb7, 0x31, 0x00,
	0xfd, 0x3f, 0xbc, 0xef, 0xbd, 0x39, 0x35, 0xbb, 0x57, 0x24, 0xf0, 0x31, 0xe9, 0x12, 0xfb, 0x9a,
	0x58, 0xc2, 0xf6, 0x71, 0x04, 0xfa, 0x18, 0x16, 0xc7, 0x80, 0x27, 0xcf, 0x58, 0x6c, 0x94, 0xb0,
	0x0a, 0x45, 0xf9, 0x07, 0x63, 0xfc, 0xa7, 0x39, 0xff, 0x31, 0x04, 0xad, 0x66, 0x23, 0xe0, 0xde,
	0xc0, 0x0e, 0x02, 0x62, 0xb1, 0xe0, 0x29, 0xe1, 0x31, 0x38, 0x3d, 0xe0, 0x97, 0x63, 0x57, 0x32,
	0x5b, 0xb3, 0x03, 0xfc, 0x53, 0x28, 0xdb, 0x4e, 0x40, 0xbc, 0x6b, 0xb3, 0xcf, 0xac, 0xab, 0xee,
	0xae, 0xd0, 0xa5, 0x68, 0xf6, 0x7a, 0x1e, 0xe9, 0xf1, 0x08, 0x12, 0x68, 0x1c, 0x11, 0xa2, 0x0f,
	0xa1, 0xea, 0x07, 0xa6, 0x17, 0x9c, 0x45, 0xee, 0xe3, 0x9b, 0x20, 0x05, 0x45, 0x06, 0x2c, 0x10,
	0xc7, 0x8a, 0xa9, 0x78, 0xfd, 0x9d, 0x80, 0x89, 0x4b, 0x5d, 0x52, 0xd9, 0xe8, 0x66, 0x18, 0x06,
	0x89, 0xc6, 0x82, 0xa4, 0xc6, 0x82, 0x44, 0xa6, 0x0c, 0xc3, 0xc3, 0x87, 0xad, 0x23, 0xbb, 0xe7,
	0x99, 0x01, 0x39, 0x76, 0x2d, 0x72, 0xe6, 0xf2, 0xe2, 0xa6, 0x43, 0x7c, 0x7f, 0x72, 0x41, 0x44,
	0x6b, 0x85, 0xef, 0x5c, 0xdb, 0xa1, 0x08, 0x51, 0xd6, 0x88, 0x21, 0x8d, 0x10, 0x8b, 0x5c, 0x1f,
	0xbb, 0x4e, 0x97, 0x84, 0xc7, 0x68, 0x0c, 0x30, 0x1e, 0x83, 0x91, 0x27, 0x54, 0x84, 0xdd, 0xaf,
	0x35, 0x78, 0x8f, 0x63, 0xa2, 0xc3, 0x3f, 0x53, 0x93, 0x0d, 0x80, 0x0b, 0x6f, 0x10, 0x1e, 0xf5,
	0x5c, 0x19, 0x09, 0x42, 0xb3, 0x11, 0x2d, 0x9f, 0x44, 0x91, 0xc5, 0xbe, 0xe9, 0x76, 0xbd, 0x38,
	0x75, 0xc5, 0xb3, 0x48, 0x05, 0xf3, 0x01, 0x4b, 0xcc, 0x34, 0x0d, 0x78, 0x03, 0x11, 0x28, 0x65,
	0x1c, 0x03, 0x8c, 0x83, 0xf0, 0xd5, 0x29, 0xa5, 0x58, 0xe8, 0xa9, 0x8f, 0x60, 0xda, 0x0e, 0xc8,
	0x40, 0x5c, 0x01, 0x16, 0xe3, 0x2b, 0x40, 0x4c, 0xc9, 0x08, 0x8c, 0x4d, 0x58, 0xcf, 0x60, 0x24,
	0xac, 0x7f, 0x0a, 0x8d, 0xfd, 0xfe, 0xc8, 0xbf, 0x94, 0xf0, 0xfb, 0xae, 0xd7, 0x66, 0xe6, 0x4e,
	0x2a, 0x54, 0x1f, 0xc1, 0x56, 0xce, 0x5c, 0x21, 0xe0, 0x4b, 0x78, 0x14, 0x15, 0xb3, 0x91, 0x78,
	0xff, 0xd6, 0x32, 0xbe, 0x86, 0xc7, 0xf9, 0xd3, 0x45, 0x28, 0xfe, 0x1f, 0x94, 0xa8, 0xc1, 0xbe,
	0x88, 0x44, 0xa5, 0x4b, 0x38, 0x85, 0xd0, 0xe8, 0x98, 0xbc, 0x61, 0x65, 0x6e, 0xdf, 0x76, 0xae,
	0x68, 0x35, 0x7b, 0x6b, 0x8d, 0x9e, 0x32, 0x8d, 0x72, 0xa6, 0x0b, 0x8d, 0xc2, 0x58, 0xd0, 0xe2,
	0x58, 0x30, 0x3e, 0x83, 0x46, 0x27, 0xf0, 0x88, 0x39, 0xd8, 0xf7, 0xcc, 0x01, 0x79, 0xee, 0xf6,
	0xa8, 0x25, 0x13, 0x33, 0xe6, 0xef, 0x34, 0xd8, 0xca, 0x99, 0x26, 0xe4, 0x7d, 0x0e, 0x0b, 0xa3,
	0x21, 0x53, 0x87, 0x12, 0x85, 0x8e, 0x60, 0x6f, 0x65, 0xe7, 0x31, 0xfc, 0xb9, 0xdb, 0xc3, 0x09,
	0x3a, 0xf4, 0x13, 0xa8, 0x5a, 0xa1, 0x21, 0x7c, 0x26, 0xcf, 0xf8, 0x4b, 0xcc, 0x85, 0x32, 0x86,
	0xce, 0x4d, 0xd1, 0x1a, 0x5f, 0xc0, 0xe6, 0xb8, 0x6a, 0xb7, 0xbb, 0x39, 0xfd, 0x56, 0x53, 0x79,
	0x23, 0x75, 0xcb, 0xfe, 0xef, 0x58, 0xf5, 0x4b, 0x0d, 0xca, 0x6d, 0x33, 0x30, 0xb1, 0x19, 0xb0,
	0xa3, 0x72, 0xe0, 0x5a, 0xa3, 0x3e, 0x4b, 0xb6, 0xe2, 0x1c, 0x92, 0x20, 0x74, 0x2b, 0xbf, 0x36,
	0x1d, 0xeb, 0xc6, 0xb6, 0x82, 0x4b, 0x96, 0x13, 0x2a, 0x38, 0x06, 0xd0, 0x14, 0xeb, 0x0f, 0x3d,
	0x62, 0x5a, 0xfb, 0x66, 0x37, 0x70, 0x3d, 0x91, 0x1a, 0x12, 0x30, 0x9a, 0xe0, 0x5e, 0xdb, 0x01,
	0x4d, 0x54, 0x22, 0x49, 0x84, 0x43, 0xc3, 0x83, 0x05, 0x6e, 0xe6, 0xd9, 0x8b, 0x43, 0xe7, 0xc2,
	0x4d, 0xde, 0x01, 0xb4, 0xf4, 0x1d, 0x60, 0x1b, 0xca, 0x96, 0xd0, 0x9a, 0x29, 0x32, 0xbf, 0xbb,
	0xc0, 0xcc, 0x15, 0x30, 0x1c, 0x61, 0xf9, 0xb5, 0xc8, 0x22, 0x8c, 0x92, 0x1f, 0x0d, 0xd1, 0xd8,
	0xf8, 0x9b, 0x16, 0x0a, 0xc5, 0x5c, 0xa8, 0xb2, 0xea, 0xa2, 0x07, 0x71, 0x58, 0x75, 0xd1, 0x6f,
	0x76, 0x5e, 0xda, 0x03, 0xd2, 0xb1, 0x9d, 0x2e, 0x39, 0x38, 0xed, 0xec, 0x0d, 0xdd, 0xee, 0xa5,
	0xe0, 0x3d, 0x8e, 0x48, 0x9e, 0xed, 0xdc, 0x68, 0xe9, 0x6c, 0x47, 0x30, 0xed, 0xf9, 0xbe, 0x2d,
	0x4e, 0x50, 0xf6, 0x4d, 0x9d, 0xd4, 0x77, 0xb1, 0xd9, 0x39, 0xc6, 0xac, 0xf0, 0x2a, 0xe0, 0x70,
	0x48, 0x33, 0xec, 0x6b, 0xd7, 0xf4, 0x2c, 0x56, 0x66, 0x55, 0x30, 0x1f, 0x50, 0x7a, 0xd3, 0x09,
	0x88, 0xe3, 0x98, 0xac, 0xb4, 0xad, 0xe0, 0x70, 0x68, 0xfc, 0x42, 0x83, 0x6a, 0x32, 0x78, 0xe8,
	0x49, 0x16, 0xbc, 0xa1, 0xc6, 0x8a, 0x94, 0x5a, 0x8b, 0x03, 0x8c, 0x7b, 0x1e, 0x0b, 0x3c, 0x3b,
	0xf3, 0x38, 0x65, 0x21, 0x3e, 0xf3, 0x64, 0x77, 0x61, 0x81, 0xa7, 0x71, 0x33, 0xbc, 0x0c, 0x6f,
	0x5d, 0xe2, 0x75, 0x43, 0x82, 0x18, 0xdf, 0x17, 0xa0, 0x1a, 0x46, 0xe2, 0x59, 0x96, 0xa7, 0x1b,
	0x30, 0x6f, 0x0f, 0x06, 0xc4, 0xb2, 0xcd, 0x80, 0xf4, 0xf9, 0xb5, 0xbe, 0x8c, 0x65, 0xd0, 0x3b,
	0xf5, 0x7b, 0xfe, 0x15, 0x73, 0x09, 0x4a, 0x43, 0xf7, 0x86, 0xf0, 0x5b, 0x66, 0x09, 0xf3, 0x41,
	0x22, 0xe8, 0x66, 0x6f, 0x1d, 0x74, 0xe5, 0x64, 0xd0, 0x45, 0x17, 0xde, 0x39, 0xe9, 0xc2, 0x1b,
	0xad, 0x2b, 0x64, 0xac, 0xeb, 0x7c, 0x72, 0x5d, 0xbf, 0x85, 0x5a, 0x7a, 0x67, 0xa3, 0x9d, 0xd4,
	0xc2, 0x22, 0x79, 0xff, 0xa7, 0x96, 0x36, 0xb9, 0x60, 0x85, 0xb1, 0x05, 0xfb, 0xbd, 0x06, 0x55,
	0x91, 0x75, 0xa5, 0x26, 0x58, 0x2f, 0x01, 0x89, 0x5f, 0xf7, 0xd3, 0x70, 0x66, 0x3e, 0xbf, 0x00,
	0xf0, 0x64, 0x54, 0xc2, 0xd1, 0x18, 0xb5, 0xa1, 0x42, 0xde, 0x04, 0x9e, 0xd9, 0x0a, 0x09, 0x8a,
	0x2c, 0xb8, 0x36, 0xa4, 0x82, 0x4a, 0x30, 0xda, 0x93, 0xc8, 0x70, 0x72, 0x92, 0xf1, 0xbd, 0x06,
	0x7a, 0x36, 0x35, 0x7a, 0x32, 0x96, 0xc8, 0xaa, 0xbb, 0x55, 0x2a, 0xe1, 0x28, 0x82, 0xa6, 0x13,
	0x5b, 0x1c, 0x0d, 0xbc, 0xb2, 0x96, 0xa2, 0x21, 0x91, 0xf6, 0x78, 0x1d, 0x2d, 0xa5, 0xbd, 0x54,
	0x4a, 0x2b, 0x45, 0x29, 0x8d, 0xbd, 0x11, 0xb3, 0xe4, 0x67, 0x3b, 0x3d, 0x9e, 0xff, 0xf8, 0xcb,
	0x4c, 0x09, 0x8f, 0xc1, 0xe3, 0x06, 0x77, 0xd2, 0x2a, 0xa9, 0x41, 0x94, 0xf4, 0xb2, 0xbc, 0xc8,
	0xa9, 0x29, 0x29, 0xca, 0xb8, 0xb1, 0x97, 0x66, 0x1d, 0x37, 0xf6, 0x6e, 0xbb, 0xb2, 0xc6, 0x0e,
	0x7b, 0xe8, 0x52, 0xeb, 0x58, 0x85, 0x82, 0x6d, 0x89, 0x99, 0x05, 0xdb, 0x0a, 0x9b, 0xd8, 0x19,
	0x52, 0xef, 0x61, 0xd1, 0xbb, 0x69, 0x62, 0xbf, 0x7b, 0x47, 0x47, 0xfd, 0x33, 0xb5, 0xc9, 0x71,
	0xff, 0x4c, 0x2d, 0xfa, 0x2e, 0xeb, 0x10, 0xf5, 0xcf, 0xd4, 0xa2, 0x76, 0xd6, 0xa0, 0x8c, 0x5f,
	0x7c, 0x63, 0x3b, 0x96, 0x7b, 0x83, 0x66, 0xa1, 0x88, 0x5f, 0x7c, 0x52, 0x9b, 0xe2, 0x1f, 0xbb,
	0x35, 0x6d, 0x67, 0x13, 0x20, 0xde, 0x08, 0xa8, 0x0c, 0xd3, 0xcf, 0x4f, 0x70, 0x93, 0x13, 0xec,
	0x77, 0x9e, 0xd5, 0xb4, 0x9d, 0x3e, 0x2c, 0x2a, 0xae, 0x5d, 0x08, 0x60, 0xa6, 0xb3, 0xd7, 0x3a,
	0x39, 0x6e, 0xd7, 0xa6, 0xe8, 0xf7, 0xd1, 0xe1, 0xf1, 0xf9, 0xd9, 0x5e, 0x4d, 0xa3, 0x1c, 0xbe,
	0x3a, 0x39, 0xc7, 0xb5, 0x02, 0xe5, 0xd0, 0x6e, 0xbe, 0xac, 0x15, 0x29, 0xe8, 0x9b, 0xbd, 0xbd,
	0x67, 0xb5, 0x69, 0x34, 0x07, 0xa5, 0xa3, 0x93, 0xe3, 0xb3, 0xaf, 0x6a, 0x25, 0x34, 0x0f, 0xb3,
	0x5f, 0x9f, 0x37, 0xf1, 0xd9, 0x1e, 0xae, 0xcd, 0x50, 0x8a, 0x97, 0x7b, 0x4d, 0x5c, 0x9b, 0xdd,
	0xfd, 0x97, 0x0e, 0x95, 0x63, 0x12, 0xdc, 0xb8, 0xde, 0x55, 0x87, 0x78, 0xd7, 0xc4, 0x43, 0xaf,
	0xc2, 0xf7, 0xba, 0x64, 0x8f, 0x1e, 0x6d, 0xd2, 0x55, 0xc8, 0xf9, 0x11, 0x44, 0x6f, 0x64, 0x13,
	0x88, 0x45, 0x98, 0x42, 0x98, 0xbd, 0x82, 0xa5, 0x38, 0xaf, 0x89, 0x5b, 0xbf, 0x9a, 0xed, 0x7a,
	0x06, 0x36, 0xe2, 0xf9, 0x2a, 0x7c, 0xc6, 0x51, 0x29, 0x9c, 0xf3, 0xd3, 0x04, 0x57, 0x38, 0xf7,
	0xd7, 0x07, 0xc6, 0x5c, 0xf5, 0xc7, 0x02, 0x67, 0x9e, 0xf3, 0x5b, 0x04, 0x67, 0x9e, 0xfb, 0xb3,
	0xc3, 0x54, 0xec, 0xea, 0xd4, 0x4f, 0x0f, 0x92, 0xab, 0x95, 0xed, 0x5e, 0xd9, 0xd5, 0x19, 0x4d,
	0xdc, 0xd0, 0xd5, 0x29, 0xce, 0xa1, 0xab, 0xd5, 0x6c, 0xd7, 0x33, 0xb0, 0xe3, 0xae, 0x56, 0x29,
	0x9c, 0xd3, 0x64, 0x97, 0x5d, 0x9d, 0xc7, 0x5c, 0xd5, 0x97, 0x96, 0x5d, 0x9d, 0xc3, 0x3c, 0xb7,
	0xa5, 0x3d, 0x85, 0x5e, 0x24, 0x7b, 0x7b, 0x21, 0xef, 0x8d, 0xd8, 0x91, 0xaa, 0x06, 0xa8, 0xbe,
	0x99, 0x89, 0x8f, 0x38, 0x9f, 0x48, 0x2d, 0xbe, 0x90, 0xed, 0x43, 0xe1, 0x48, 0x25, 0xcf, 0x35,
	0x35, 0x52, 0x56, 0x55, 0xd1, 0xb1, 0xe5, 0xaa, 0x66, 0x77, 0x88, 0xf5, 0xcd, 0x4c, 0xbc, 0xcc,
	0x59, 0xd1, 0xa4, 0xe5, 0x9c, 0xb3, 0xbb, 0xc0, 0xfa, 0x66, 0x26, 0x3e, 0xe2, 0xdc, 0x82, 0x05,
	0xd9, 0x4b, 0x68, 0x25, 0xed, 0xb7, 0x90, 0x57, 0x7d, 0x1c, 0x11, 0x31, 0x79, 0x0a, 0x73, 0x91,
	0x5b, 0xd0, 0x52, 0xc2, 0x4b, 0xe1, 0xf4, 0x07, 0x29, 0xa8, 0xac, 0x80, 0x6c, 0x3b, 0x57, 0x40,
	0xd1, 0xd9, 0xe4, 0x0a, 0x28, 0xfb, 0x96, 0x8c, 0x89, 0x6c, 0x26, 0x67, 0xa2, 0xe8, 0x65, 0x72,
	0x26, 0xca, 0xae, 0xe5, 0x14, 0x3a, 0x84, 0x6a, 0xb2, 0xef, 0x87, 0x56, 0xd9, 0x53, 0x9a, 0xaa,
	0xdf, 0xa7, 0xeb, 0x2a, 0x94, 0x1c, 0x5a, 0xe9, 0xae, 0x1f, 0x0f, 0xad, 0x8c, 0xf6, 0x21, 0x0f,
	0xad, 0xcc, 0x46, 0x21, 0x0b, 0x00, 0x45, 0xcf, 0x8f, 0x07, 0x40, 0x76, 0x0f, 0x91, 0x07, 0x40,
	0x4e, 0xb3, 0xd0, 0x98, 0x42, 0xdf, 0x86, 0x7d, 0x8f, 0xf4, 0x23, 0x57, 0x23, 0xbd, 0xe0, 0xe9,
	0x67, 0x26, 0x7d, 0x2b, 0x87, 0x22, 0xe2, 0xff, 0x1d, 0xac, 0x66, 0xbe, 0x02, 0xa1, 0xc7, 0x94,
	0xc3, 0xa4, 0x07, 0x26, 0xfd, 0x83, 0x09, 0x54, 0x91, 0x2c, 0x1f, 0xd6, 0xf2, 0x5e, 0x83, 0xd0,
	0x47, 0x09, 0x77, 0x64, 0x3f, 0x37, 0xe9, 0xdb, 0x93, 0x09, 0x53, 0x42, 0x33, 0x1f, 0x7c, 0x22,
	0xa1, 0x93, 0x5e, 0x94, 0x22, 0xa1, 0x13, 0xdf, 0x8e, 0xa2, 0xdc, 0x95, 0xe8, 0x9d, 0x46, 0xb9,
	0x4b, 0xd5, 0x6c, 0x8d, 0x72, 0x97, 0xb2, 0xdd, 0xca, 0x97, 0x29, 0xb3, 0xd9, 0xc9, 0x97, 0x69,
	0x52, 0xd7, 0x95, 0x2f, 0xd3, 0xe4, 0x8e, 0xe9, 0x14, 0x32, 0x61, 0x59, 0xdd, 0x7b, 0x44, 0x5b,
	0xfc, 0xaf, 0xc7, 0x9c, 0x76, 0xaa, 0x6e, 0xe4, 0x91, 0x44, 0x22, 0xf6, 0xa1, 0x92, 0x28, 0xdf,
	0x91, 0x94, 0xbe, 0x92, 0x0f, 0x6a, 0xfa, 0xaa, 0x02, 0x13, 0xf1, 0xf9, 0x12, 0x20, 0xae, 0xc6,
	0xd1, 0x83, 0x74, 0x97, 0x83, 0x73, 0xc8, 0x68, 0x7e, 0x70, 0x35, 0x12, 0xc5, 0x2d, 0x92, 0x92,
	0x98, 0x4a, 0x0d, 0x75, 0x9f, 0x67, 0x0a, 0x35, 0x61, 0x41, 0xea, 0xd2, 0xf8, 0x88, 0x49, 0x1c,
	0xef, 0xfd, 0xe8, 0x2b, 0x63, 0x70, 0x59, 0x95, 0x44, 0xf1, 0x8b, 0xa4, 0x54, 0xa8, 0x52, 0x45,
	0xdd, 0x84, 0x91, 0x4a, 0x9f, 0xd4, 0x55, 0x77, 0x73, 0xcc, 0x8d, 0xd9, 0xa5, 0x4f, 0x46, 0xa9,
	0x1f, 0x96, 0x3e, 0x29, 0xce, 0x6b, 0x49, 0xf7, 0x66, 0x94, 0x3e, 0x99, 0x3c, 0x5f, 0xa5, 0x9a,
	0x85, 0x8a, 0xd2, 0x27, 0x47, 0xe1, 0xdc, 0xbb, 0x89, 0x54, 0xfa, 0xa8, 0x98, 0xe7, 0xdc, 0x5b,
	0xe4, 0xd2, 0x27, 0x93, 0xf9, 0x73, 0x78, 0x2f, 0xd5, 0x5a, 0x41, 0x7a, 0xd2, 0x5a, 0xb9, 0x39,
	0xa4, 0x3f, 0x54, 0xe2, 0x22, 0x6e, 0x03, 0xd0, 0xb3, 0xdb, 0x1d, 0x88, 0x6d, 0xde, 0x89, 0x3d,
	0x18, 0xfd, 0xc3, 0x49, 0x64, 0x91, 0xb8, 0x3e, 0xac, 0x66, 0x3e, 0x4a, 0xf3, 0x84, 0x32, 0xe9,
	0xa9, 0x9b, 0x27, 0x94, 0x89, 0x2f, 0xdb, 0xc6, 0xd4, 0xc7, 0x1a, 0xb2, 0xa1, 0x9e, 0xf5, 0x56,
	0x8c, 0x1e, 0xa9, 0xd9, 0x24, 0x0f, 0xe0, 0xc7, 0xf9, 0x44, 0xb1, 0xa8, 0xd7, 0x33, 0xec, 0xe7,
	0xfa, 0x4f, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x8b, 0x05, 0xf4, 0x7c, 0x2f, 0x00, 0x00,
}
